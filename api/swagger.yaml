---
swagger: "2.0"
info:
  description: "The Grafana backend exposes an HTTP API, the same API is used by the\
    \ frontend to do\neverything from saving dashboards, creating users and updating\
    \ data sources."
  version: "0.0.1"
  title: "Grafana HTTP API."
  contact:
    name: "Grafana Labs"
    url: "https://grafana.com"
    email: "hello@grafana.com"
  license:
    name: "GNU Affero General Public License v3.0"
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
host: "localhost:10081"
basePath: "/api"
tags:
- name: "datasources"
  description: "If you are running Grafana Enterprise and have Fine-grained access\
    \ control enabled, for some endpoints you would need to have relevant permissions.\
    \ Refer to specific resources to understand what permissions are required."
- name: "folders"
  description: "Folders are identified by the identifier (id) and the unique identifier\
    \ (uid).\nThe identifier (id) of a folder is an auto-incrementing numeric value\
    \ and is only unique per Grafana install.\nThe unique identifier (uid) of a folder\
    \ can be used for uniquely identify folders between multiple Grafana installs.\
    \ It’s automatically generated if not provided when creating a folder. The uid\
    \ allows having consistent URLs for accessing folders and when syncing folders\
    \ between multiple Grafana installs. This means that changing the title of a folder\
    \ will not break any bookmarked links to that folder.\nThe uid can have a maximum\
    \ length of 40 characters.\n\nThe General folder (id=0) is special and is not\
    \ part of the Folder API which means that you cannot use this API for retrieving\
    \ information about the General folder."
- name: "folder_permissions"
  description: "Permissions with `folderId=-1` are the default permissions for users\
    \ with the Viewer and Editor roles. Permissions can be set for a user, a team\
    \ or a role (Viewer or Editor). Permissions cannot be set for Admins - they always\
    \ have access to everything."
- name: "admin"
  description: "The Admin HTTP API does not currently work with an API Token. API\
    \ Tokens are currently only linked to an organization and an organization role.\
    \ They cannot be given the permission of server admin, only users can be given\
    \ that permission. So in order to use these API calls you will have to use Basic\
    \ Auth and the Grafana user must have the Grafana Admin permission. (The default\
    \ admin user is called admin and has permission to use this API.)"
- name: "legacy_alerting"
  description: "You can use the Alerting API to get information about legacy dashboard\
    \ alerts and their states but this API cannot be used to modify the alert. To\
    \ create new alerts or modify them you need to update the dashboard JSON that\
    \ contains the alerts.\nThis topic is relevant for the legacy dashboard alerts\
    \ only.\nYou can find Grafana 8 alerts API specification details [here](https://editor.swagger.io/?url=https://raw.githubusercontent.com/grafana/grafana/main/pkg/services/ngalert/api/tooling/post.json)."
- name: "legacy_notification_channels"
  description: "The identifier (id) of a notification channel is an auto-incrementing\
    \ numeric value and is only unique per Grafana install.\nThe unique identifier\
    \ (uid) of a notification channel can be used for uniquely identify a notification\
    \ channel between multiple Grafana installs. It’s automatically generated if not\
    \ provided when creating a notification channel. The uid allows having consistent\
    \ URLs for accessing notification channels and when syncing notification channels\
    \ between multiple Grafana installations, refer to alert notification channel\
    \ provisioning.\nThe uid can have a maximum length of 40 characters."
- name: "annotations"
  description: "Grafana Annotations feature released in Grafana 4.6. Annotations are\
    \ saved in the Grafana database (sqlite, mysql or postgres). Annotations can be\
    \ global annotations that can be shown on any dashboard by configuring an annotation\
    \ data source - they are filtered by tags. Or they can be tied to a panel on a\
    \ dashboard and are then only shown on that panel."
- name: "library_elements"
  description: "The identifier (ID) of a library element is an auto-incrementing numeric\
    \ value that is unique per Grafana install.\nThe unique identifier (UID) of a\
    \ library element uniquely identifies library elements between multiple Grafana\
    \ installs. It’s automatically generated unless you specify it during library\
    \ element creation. The UID provides consistent URLs for accessing library elements\
    \ and when syncing library elements between multiple Grafana installs.\nThe maximum\
    \ length of a UID is 40 characters."
- name: "orgs"
  description: "The Admin Organizations HTTP API does not currently work with an API\
    \ Token. API Tokens are currently only linked to an organization and an organization\
    \ role. They cannot be given the permission of server admin, only users can be\
    \ given that permission. So in order to use these API calls you will have to use\
    \ Basic Auth and the Grafana user must have the Grafana Admin permission (The\
    \ default admin user is called `admin` and has permission to use this API)."
- name: "org"
  description: "If you are running Grafana Enterprise and have Fine-grained access\
    \ control enabled, for some endpoints you would need to have relevant permissions.\
    \ Refer to specific resources to understand what permissions are required."
- name: "teams"
  description: "This API can be used to create/update/delete Teams and to add/remove\
    \ users to Teams. All actions require that the user has the Admin role for the\
    \ organization."
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basic: []
- api_key: []
paths:
  /admin/ldap/reload:
    post:
      tags:
      - "admin_ldap"
      summary: "Reloads the LDAP configuration."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.config:reload`."
      operationId: "reloadLDAP"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/status:
    get:
      tags:
      - "admin_ldap"
      summary: "Attempts to connect to all the configured LDAP servers and returns\
        \ information on whenever they're available or not."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.status:read`."
      operationId: "getLDAPStatus"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/sync/{user_id}:
    post:
      tags:
      - "admin_ldap"
      summary: "Enables a single Grafana user to be synchronized against LDAP."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.user:sync`."
      operationId: "syncLDAPUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/ldap/{user_name}:
    get:
      tags:
      - "admin_ldap"
      summary: "Finds an user based on a username in LDAP. This helps illustrate how\
        \ would the particular user be mapped in Grafana when synced."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `ldap.user:read`."
      operationId: "getLDAPUser"
      parameters:
      - name: "user_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UserID"
        x-exportParamName: "UserName"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/pause-all-alerts:
    post:
      tags:
      - "admin"
      summary: "Pause/unpause all (legacy) alerts."
      operationId: "pauseAllAlerts"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PauseAllAlertsCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/accesscontrol/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload access control provisioning configurations."
      description: "Reloads the provisioning config files for access control again.\
        \ It won’t return until the new provisioned entities are already stored in\
        \ the database. In case of dashboards, it will stop polling for changes in\
        \ dashboard files and then restart it with new configurations after returning.\n\
        If you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled, you need to have a permission with action `provisioning:reload`\
        \ and scope `provisioners:accesscontrol`."
      operationId: "reloadProvisionedAccessControl"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/dashboards/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload dashboard provisioning configurations."
      description: "Reloads the provisioning config files for dashboards again. It\
        \ won’t return until the new provisioned entities are already stored in the\
        \ database. In case of dashboards, it will stop polling for changes in dashboard\
        \ files and then restart it with new configurations after returning.\nIf you\
        \ are running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:dashboards`."
      operationId: "reloadProvisionedDashboards"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/datasources/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload datasource provisioning configurations."
      description: "Reloads the provisioning config files for datasources again. It\
        \ won’t return until the new provisioned entities are already stored in the\
        \ database. In case of dashboards, it will stop polling for changes in dashboard\
        \ files and then restart it with new configurations after returning.\nIf you\
        \ are running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:datasources`."
      operationId: "reloadProvisionedDatasources"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/notifications/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload legacy alert notifier provisioning configurations."
      description: "Reloads the provisioning config files for legacy alert notifiers\
        \ again. It won’t return until the new provisioned entities are already stored\
        \ in the database. In case of dashboards, it will stop polling for changes\
        \ in dashboard files and then restart it with new configurations after returning.\n\
        If you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled, you need to have a permission with action `provisioning:reload`\
        \ and scope `provisioners:notifications`."
      operationId: "reloadProvisionedAlertNotifiers"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/provisioning/plugins/reload:
    post:
      tags:
      - "admin_provisioning"
      summary: "Reload plugin provisioning configurations."
      description: "Reloads the provisioning config files for plugins again. It won’\
        t return until the new provisioned entities are already stored in the database.\
        \ In case of dashboards, it will stop polling for changes in dashboard files\
        \ and then restart it with new configurations after returning.\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled,\
        \ you need to have a permission with action `provisioning:reload` and scope\
        \ `provisioners:plugin`."
      operationId: "reloadProvisionedPlugins"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/settings:
    get:
      tags:
      - "admin"
      summary: "Fetch settings."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `settings:read`\
        \ and scopes: `settings:*`, `settings:auth.saml:` and `settings:auth.saml:enabled`\
        \ (property level)."
      operationId: "getSettings"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SettingsBag"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/stats:
    get:
      tags:
      - "admin"
      summary: "Fetch Grafana Stats."
      description: "Only works with Basic Authentication (username and password).\
        \ See introduction for an explanation.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `server:stats:read`."
      operationId: "getStats"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AdminStats"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users:
    post:
      tags:
      - "admin_users"
      summary: "Create new user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:create`.\n\
        Note that OrgId is an optional parameter that can be used to assign a new\
        \ user to a different organization when `auto_assign_org` is set to `true`."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminCreateUserForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserIdDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}:
    delete:
      tags:
      - "admin_users"
      summary: "Delete global User."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:delete`\
        \ and scope `global:users:*`."
      operationId: "deleteUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/auth-tokens:
    get:
      tags:
      - "admin_users"
      summary: "Return a list of all auth tokens (devices) that the user currently\
        \ have logged in from."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.authtoken:list`\
        \ and scope `global:users:*`."
      operationId: "getAuthTokens"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserToken"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/disable:
    post:
      tags:
      - "admin_users"
      summary: "Disable user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:disable`\
        \ and scope `global:users:1` (userIDScope)."
      operationId: "disableUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/enable:
    post:
      tags:
      - "admin_users"
      summary: "Enable user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users:enable`\
        \ and scope `global:users:1` (userIDScope)."
      operationId: "enableUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/logout:
    post:
      tags:
      - "admin_users"
      summary: "Logout user revokes all auth tokens (devices) for the user. User of\
        \ issued auth tokens (devices) will no longer be logged in and will be required\
        \ to authenticate again upon next activity."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.logout`\
        \ and scope `global:users:*`."
      operationId: "logoutUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/password:
    put:
      tags:
      - "admin_users"
      summary: "Set password for user."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.password:update`\
        \ and scope `global:users:*`."
      operationId: "setPassword"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminUpdateUserPasswordForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/permissions:
    put:
      tags:
      - "admin_users"
      summary: "Set permissions for user."
      description: "Only works with Basic Authentication (username and password).\
        \ See introduction for an explanation.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `users.permissions:update` and scope `global:users:*`."
      operationId: "setPermissions"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AdminUpdateUserPermissionsForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/quotas:
    get:
      tags:
      - "admin_users"
      summary: "Fetch user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.quotas:list`\
        \ and scope `global:users:1` (userIDScope)."
      operationId: "getUserQuota"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/quotas/{quota_target}:
    put:
      tags:
      - "admin_users"
      summary: "Update user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `users.quotas:update`\
        \ and scope `global:users:1` (userIDScope)."
      operationId: "updateUserQuota"
      parameters:
      - name: "quota_target"
        in: "path"
        required: true
        type: "string"
        x-go-name: "QuotaTarget"
        x-exportParamName: "QuotaTarget"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserQuotaCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /admin/users/{user_id}/revoke-auth-token:
    post:
      tags:
      - "admin_users"
      summary: "Revoke auth token for user."
      description: "Revokes the given auth token (device) for the user. User of issued\
        \ auth token (device) will no longer be logged in and will be required to\
        \ authenticate again upon next activity.\nIf you are running Grafana Enterprise\
        \ and have Fine-grained access control enabled, you need to have a permission\
        \ with action `users.authtoken:update` and scope `global:users:*`."
      operationId: "revokeAuthToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RevokeAuthTokenCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications:
    get:
      tags:
      - "legacy_notification_channels"
      summary: "Get all notification channels."
      description: "Returns all notification channels that the authenticated user\
        \ has permission to view."
      operationId: "getAlertNotificationChannels"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "legacy_notification_channels"
      summary: "Create notification channel."
      description: "You can find the full list of [supported notifiers](https://grafana.com/docs/grafana/latest/alerting/old-alerting/notifications/#list-of-supported-notifiers)\
        \ on the alert notifiers page."
      operationId: "createAlertNotificationChannel"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAlertNotificationCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/lookup:
    get:
      tags:
      - "legacy_notification_channels"
      summary: "Get all notification channels (lookup)"
      description: "Returns all notification channels, but with less detailed information.\
        \ Accessible by any authenticated user and is mainly used by providing alert\
        \ notification channels in Grafana UI when configuring alert rule."
      operationId: "lookupAlertNotificationChannels"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertNotificationLookup"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/test:
    post:
      tags:
      - "legacy_notification_channels"
      summary: "Test notification channel."
      description: "Sends a test notification to the channel."
      operationId: "notificationChannelTest"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NotificationTestCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: ""
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/uid/{notification_channel_uid}:
    get:
      tags:
      - "legacy_notification_channels"
      summary: "Get notification channel by UID"
      description: "Returns the notification channel given the notification channel\
        \ UID."
      operationId: "getAlertNotificationChannelByUID"
      parameters:
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "NotificationUID"
        x-exportParamName: "NotificationChannelUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "legacy_notification_channels"
      summary: "Update notification channel by UID."
      description: "Updates an existing notification channel identified by uid."
      operationId: "updateAlertNotificationChannelBYUID"
      parameters:
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "NotificationUID"
        x-exportParamName: "NotificationChannelUid"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAlertNotificationWithUidCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "legacy_notification_channels"
      summary: "Delete alert notification by UID."
      description: "Deletes an existing notification channel identified by UID."
      operationId: "deleteAlertNotificationChannelByUID"
      parameters:
      - name: "notification_channel_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "NotificationUID"
        x-exportParamName: "NotificationChannelUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alert-notifications/{notification_channel_id}:
    get:
      tags:
      - "legacy_notification_channels"
      summary: "Get notification channel by ID."
      description: "Returns the notification channel given the notification channel\
        \ ID."
      operationId: "getAlertNotificationChannelByID"
      parameters:
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "NotificationID"
        x-exportParamName: "NotificationChannelId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "legacy_notification_channels"
      summary: "Update notification channel by ID."
      description: "Updates an existing notification channel identified by ID."
      operationId: "updateAlertNotificationChannel"
      parameters:
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "NotificationID"
        x-exportParamName: "NotificationChannelId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAlertNotificationCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertNotification"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "legacy_notification_channels"
      summary: "Delete alert notification by ID."
      description: "Deletes an existing notification channel identified by ID."
      operationId: "deleteAlertNotificationChannel"
      parameters:
      - name: "notification_channel_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "NotificationID"
        x-exportParamName: "NotificationChannelId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts:
    get:
      tags:
      - "legacy_alerting"
      summary: "Get legacy alerts."
      operationId: "getAlerts"
      parameters:
      - name: "dashboardId"
        in: "query"
        description: "Limit response to alerts in specified dashboard(s). You can\
          \ specify multiple dashboards."
        required: false
        type: "array"
        items:
          type: "string"
        x-go-name: "DashboardID"
        x-exportParamName: "DashboardId"
      - name: "panelId"
        in: "query"
        description: "Limit response to alert for a specified panel on a dashboard."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "PanelID"
        x-exportParamName: "PanelId"
        x-optionalDataType: "Int64"
      - name: "query"
        in: "query"
        description: "Limit response to alerts having a name like this value."
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "Return alerts with one or more of the following alert states"
        required: false
        type: "string"
        enum:
        - "all"
        - "no_data"
        - "paused"
        - "alerting"
        - "ok"
        - "pending"
        - "unknown"
        x-go-name: "State"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit response to X number of alerts."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "folderId"
        in: "query"
        description: "Limit response to alerts of dashboards in specified folder(s).\
          \ You can specify multiple folders"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-go-name: "FolderID"
        x-exportParamName: "FolderId"
      - name: "dashboardQuery"
        in: "query"
        description: "Limit response to alerts having a dashboard name like this value./\
          \ Limit response to alerts having a dashboard name like this value."
        required: false
        type: "string"
        x-go-name: "DashboardQuery"
        x-exportParamName: "DashboardQuery"
        x-optionalDataType: "String"
      - name: "dashboardTag"
        in: "query"
        description: "Limit response to alerts of dashboards with specified tags.\
          \ To do an “AND” filtering with multiple tags, specify the tags parameter\
          \ multiple times"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-go-name: "DashboardTag"
        x-exportParamName: "DashboardTag"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertListItemDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/states-for-dashboard:
    get:
      tags:
      - "legacy_alerting"
      summary: "Get alert states for a dashboard."
      operationId: "getDashboardStates"
      parameters:
      - name: "dashboardId"
        in: "query"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "DashboardID"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertStateInfoDTO"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/test:
    post:
      tags:
      - "legacy_alerting"
      summary: "Test alert."
      operationId: "testAlert"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AlertTestCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/AlertTestResult"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/{alert_id}:
    get:
      tags:
      - "legacy_alerting"
      summary: "Get alert by ID."
      description: "“evalMatches” data in the response is cached in the db when and\
        \ only when the state of the alert changes (e.g. transitioning from “ok” to\
        \ “alerting” state).\nIf data from one server triggers the alert first and,\
        \ before that server is seen leaving alerting state, a second server also\
        \ enters a state that would trigger the alert, the second server will not\
        \ be visible in “evalMatches” data."
      operationId: "getAlertByID"
      parameters:
      - name: "alert_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "AlertID"
        x-exportParamName: "AlertId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Alert"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /alerts/{alert_id}/pause:
    post:
      tags:
      - "legacy_alerting"
      summary: "Pause/unpause alert by id."
      operationId: "pauseAlert"
      parameters:
      - name: "alert_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "AlertID"
        x-exportParamName: "AlertId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PauseAlertCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations:
    get:
      tags:
      - "annotations"
      summary: "Find Annotations."
      description: "Starting in Grafana v6.4 regions annotations are now returned\
        \ in one entity that now includes the timeEnd property."
      operationId: "getAnnotations"
      parameters:
      - name: "from"
        in: "query"
        description: "Find annotations created after specific epoch datetime in milliseconds."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "From"
        x-exportParamName: "From"
        x-optionalDataType: "Int64"
      - name: "to"
        in: "query"
        description: "Find annotations created before specific epoch datetime in milliseconds."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "To"
        x-exportParamName: "To"
        x-optionalDataType: "Int64"
      - name: "userId"
        in: "query"
        description: "Limit response to annotations created by specific user."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
        x-optionalDataType: "Int64"
      - name: "alertId"
        in: "query"
        description: "Find annotations for a specified alert."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "AlertID"
        x-exportParamName: "AlertId"
        x-optionalDataType: "Int64"
      - name: "dashboardId"
        in: "query"
        description: "Find annotations that are scoped to a specific dashboard"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "DashboardID"
        x-exportParamName: "DashboardId"
        x-optionalDataType: "Int64"
      - name: "panelId"
        in: "query"
        description: "Find annotations that are scoped to a specific panel"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "PanelID"
        x-exportParamName: "PanelId"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "Max limit for results returned."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "tags"
        in: "query"
        description: "Use this to filter global annotations. Global annotations are\
          \ annotations from an annotation data source that are not connected specifically\
          \ to a dashboard or panel. You can filter by multiple tags."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-go-name: "Tags"
        x-exportParamName: "Tags"
      - name: "type"
        in: "query"
        description: "Return alerts or user created annotations"
        required: false
        type: "string"
        enum:
        - "alert"
        - "annotation"
        x-go-name: "Type"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "matchAny"
        in: "query"
        description: "Match any or all tags"
        required: false
        type: "boolean"
        x-go-name: "MatchAny"
        x-exportParamName: "MatchAny"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ItemDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "annotations"
      summary: "Create Annotation."
      description: "Creates an annotation in the Grafana database. The dashboardId\
        \ and panelId fields are optional. If they are not specified then a global\
        \ annotation is created and can be queried in any dashboard that adds the\
        \ Grafana annotations data source. When creating a region annotation include\
        \ the timeEnd property.\nThe format for `time` and `timeEnd` should be epoch\
        \ numbers in millisecond resolution.\nThe response for this HTTP request is\
        \ slightly different in versions prior to v6.4. In prior versions you would\
        \ also get an endId if you where creating a region. But in 6.4 regions are\
        \ represented using a single event with time and timeEnd properties."
      operationId: "createAnnotation"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostAnnotationsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/graphite:
    post:
      tags:
      - "annotations"
      summary: "Create Annotation in Graphite format."
      description: "Creates an annotation by using Graphite-compatible event format.\
        \ The `when` and `data` fields are optional. If `when` is not specified then\
        \ the current time will be used as annotation’s timestamp. The `tags` field\
        \ can also be in prior to Graphite `0.10.0` format (string with multiple tags\
        \ being separated by a space)."
      operationId: "createGraphiteAnnotation"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostGraphiteAnnotationsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/mass-delete:
    post:
      tags:
      - "annotations"
      summary: "Delete multiple annotations."
      operationId: "massDeleteAnnotations"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteAnnotationsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/tags:
    get:
      tags:
      - "annotations"
      summary: "Find Annotations Tags."
      description: "Find all the event tags created in the annotations."
      operationId: "getAnnotationTags"
      parameters:
      - name: "tag"
        in: "query"
        description: "Tag is a string that you can use to filter tags."
        required: false
        type: "string"
        x-go-name: "Tag"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Max limit for results returned."
        required: false
        type: "string"
        default: "100"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/GetAnnotationTagsResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /annotations/{annotation_id}:
    put:
      tags:
      - "annotations"
      summary: "Update Annotation."
      description: "Updates all properties of an annotation that matches the specified\
        \ id. To only update certain property, consider using the Patch Annotation\
        \ operation."
      operationId: "updateAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "AnnotationID"
        x-exportParamName: "AnnotationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAnnotationsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "annotations"
      summary: "Delete Annotation By ID."
      description: "Deletes the annotation that matches the specified ID."
      operationId: "deleteAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "AnnotationID"
        x-exportParamName: "AnnotationId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "annotations"
      summary: "Patch Annotation"
      description: "Updates one or more properties of an annotation that matches the\
        \ specified ID.\nThis operation currently supports updating of the `text`,\
        \ `tags`, `time` and `timeEnd` properties.\nThis is available in Grafana 6.0.0-beta2\
        \ and above."
      operationId: "patchAnnotation"
      parameters:
      - name: "annotation_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "AnnotationID"
        x-exportParamName: "AnnotationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchAnnotationsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /auth/keys:
    get:
      tags:
      - "apikeys"
      summary: "Get auth keys."
      description: "Will return auth keys."
      operationId: "getAPIkeys"
      parameters:
      - name: "includeExpired"
        in: "query"
        description: "Show expired keys"
        required: false
        type: "boolean"
        default: false
        x-go-name: "IncludeExpired"
        x-exportParamName: "IncludeExpired"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApiKeyDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "apikeys"
      summary: "Creates an API key."
      description: "Will return details of the created API key"
      operationId: "addAPIkey"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AddApiKeyCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/NewApiKeyResult"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "QuotaReachedError is returned when quota have been reached\
            \ for this resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "DublicateAPIkeyError is returned when the API key conflicts\
            \ with another"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /auth/keys/{id}:
    delete:
      tags:
      - "apikeys"
      summary: "Delete API key."
      operationId: "deleteAPIkey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "ID"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboard/snapshots:
    get:
      tags:
      - "snapshot"
      summary: "List snapshots."
      operationId: "getSnapshots"
      parameters:
      - name: "query"
        in: "query"
        description: "Search Query"
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned results"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardSnapshotDTO"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/calculate-diff:
    post:
      tags:
      - "dashboards"
      summary: "Perform diff on two dashboards."
      operationId: "calcDashboardDiff"
      produces:
      - "application/json"
      - "text/html"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Calculate dashboard diff response."
          schema:
            type: "array"
            items:
              type: "integer"
              format: "uint8"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/db:
    post:
      tags:
      - "dashboards"
      summary: "Create / Update dashboard"
      description: "Creates a new dashboard or updates an existing dashboard."
      operationId: "postDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/SaveDashboardCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Create/update dashboard response."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/home:
    get:
      tags:
      - "dashboards"
      summary: "Get home dashboard."
      operationId: "getHomeDashboard"
      parameters: []
      responses:
        "200":
          description: "Home dashboard response."
          schema:
            $ref: "#/definitions/GetHomeDashboardResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/permissions:
    get:
      tags:
      - "dashboard_permissions"
      summary: "Gets all existing permissions for the given dashboard."
      operationId: "getDashboardPermissions"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardAclInfoDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "dashboard_permissions"
      summary: "Updates permissions for a dashboard."
      description: "This operation will remove existing permissions if they’re not\
        \ included in the request."
      operationId: "postDashboardPermissions"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDashboardAclCommand"
        x-exportParamName: "Body"
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/restore:
    post:
      tags:
      - "dashboard_versions"
      summary: "Restore a dashboard to a given dashboard version."
      operationId: "restoreDashboardVersion"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      responses:
        "200":
          description: "Create/update dashboard response."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "QuotaReachedError is returned when quota have been reached\
            \ for this resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/versions:
    get:
      tags:
      - "dashboard_versions"
      summary: "Gets all existing versions for the dashboard."
      operationId: "getDashboardVersions"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      - name: "limit"
        in: "query"
        description: "Maximum number of results to return"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "start"
        in: "query"
        description: "Version to start from when returning queries"
        required: false
        type: "integer"
        default: 0
        format: "int64"
        x-go-name: "Start"
        x-exportParamName: "Start"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardVersionDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/id/{DashboardID}/versions/{DashboardVersionID}:
    get:
      tags:
      - "dashboard_versions"
      summary: "Get a specific dashboard version."
      operationId: "getDashboardVersion"
      parameters:
      - name: "DashboardID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardID"
      - name: "DashboardVersionID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DashboardVersionID"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DashboardVersionMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/import:
    post:
      tags:
      - "dashboards"
      summary: "Import dashboard."
      operationId: "importDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/ImportDashboardCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ImportDashboardInput"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/tags:
    get:
      tags:
      - "dashboards"
      summary: "Get all dashboards tags of an organisation."
      operationId: "getDashboardTags"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardTagCloudItem"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/trim:
    post:
      tags:
      - "dashboards"
      summary: "Trim defaults from dashboard."
      operationId: "trimDashboard"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/TrimDashboardCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Trimmed dashboard response."
          schema:
            $ref: "#/definitions/TrimDashboardFullWithMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /dashboards/uid/{uid}:
    get:
      tags:
      - "dashboards"
      summary: "Get dashboard by uid."
      description: "Will return the dashboard given the dashboard unique identifier\
        \ (uid)."
      operationId: "getDashboardByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DashboardFullWithMeta"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "dashboards"
      summary: "Delete dashboard by uid."
      description: "Will delete the dashboard given the specified unique identifier\
        \ (uid)."
      operationId: "deleteDashboardByUID"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "Uid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_5"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources:
    get:
      tags:
      - "datasources"
      summary: "Get all data sources."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scope: `datasources:*`."
      operationId: "getDatasources"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSourceList"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "datasources"
      summary: "Create a data source."
      description: "By defining `password` and `basicAuthPassword` under secureJsonData\
        \ property\nGrafana encrypts them securely as an encrypted blob in the database.\n\
        The response then lists the encrypted fields under secureJsonFields.\n\nIf\
        \ you are running Grafana Enterprise and have Fine-grained access control\
        \ enabled\nyou need to have a permission with action: `datasources:create`"
      operationId: "addDatasource"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/AddDataSourceCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "QuotaReachedError is returned when quota have been reached\
            \ for this resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/id/{datasource_name}:
    get:
      tags:
      - "datasources"
      summary: "Get data source Id by Name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "getDatasourceIdByName"
      parameters:
      - name: "datasource_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceName"
        x-exportParamName: "DatasourceName"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_7"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/name/{datasource_name}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by Name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "getDatasourceByName"
      parameters:
      - name: "datasource_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceName"
        x-exportParamName: "DatasourceName"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by name."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource`\
        \ (single data source)."
      operationId: "deleteDatasourceByName"
      parameters:
      - name: "datasource_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceName"
        x-exportParamName: "DatasourceName"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_8"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/proxy/{datasource_id}/{datasource_proxy_route}:
    get:
      tags:
      - "datasources"
      summary: "Data source proxy GET calls."
      description: "Proxies all calls to the actual data source."
      operationId: "datasourceProxyGETcalls"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceProxyRoute"
        x-exportParamName: "DatasourceProxyRoute"
      responses:
        "200":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "datasources"
      summary: "Data source proxy POST calls."
      description: "Proxies all calls to the actual data source. The data source should\
        \ support POST methods for the specific path and role as defined"
      operationId: "datasourceProxyPOSTcalls"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceProxyRoute"
        x-exportParamName: "DatasourceProxyRoute"
      - in: "body"
        name: "DatasourceProxyParam"
        required: true
        schema:
          type: "object"
        x-exportParamName: "DatasourceProxyParam"
      responses:
        "201":
          description: ""
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Data source proxy DELETE calls."
      description: "Proxies all calls to the actual data source."
      operationId: "datasourceProxyDELETEcalls"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      - name: "datasource_proxy_route"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceProxyRoute"
        x-exportParamName: "DatasourceProxyRoute"
      responses:
        "202":
          description: ""
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/uid/{datasource_uid}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by UID."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk`\
        \ (single data source)."
      operationId: "getDatasourceByUID"
      parameters:
      - name: "datasource_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceUID"
        x-exportParamName: "DatasourceUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by UID."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk`\
        \ (single data source)."
      operationId: "deleteDatasourceByUID"
      parameters:
      - name: "datasource_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceUID"
        x-exportParamName: "DatasourceUid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /datasources/{datasource_id}:
    get:
      tags:
      - "datasources"
      summary: "Get a single data source by Id."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:read`\
        \ and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single\
        \ data source)."
      operationId: "getDatasourceByID"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataSource"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "datasources"
      summary: "Update an existing data source."
      description: "Similar to creating a data source, `password` and `basicAuthPassword`\
        \ should be defined under\nsecureJsonData in order to be stored securely as\
        \ an encrypted blob in the database. Then, the\nencrypted fields are listed\
        \ under secureJsonFields section in the response.\n\nIf you are running Grafana\
        \ Enterprise and have Fine-grained access control enabled\nyou need to have\
        \ a permission with action: `datasources:write` and scopes: `datasources:*`,\
        \ `datasources:id:*` and `datasources:id:1` (single data source)."
      operationId: "updateDatasource"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDataSourceCommand"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "datasources"
      summary: "Delete an existing data source by id."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `datasources:delete`\
        \ and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single\
        \ data source)."
      operationId: "deleteDatasourceByID"
      parameters:
      - name: "datasource_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DatasourceID"
        x-exportParamName: "DatasourceId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders:
    get:
      tags:
      - "folders"
      summary: "Get all folders."
      description: "Returns all folders that the authenticated user has permission\
        \ to view."
      operationId: "getFolders"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the maximum number of folders to return"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Page index for starting fetching folders"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FolderSearchHit"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "folders"
      summary: "Create folder."
      operationId: "createFolder"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateFolderCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/id/{folder_id}:
    get:
      tags:
      - "folders"
      summary: "Get folder by id."
      description: "Returns the folder identified by id."
      operationId: "getFolderByID"
      parameters:
      - name: "folder_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "FolderID"
        x-exportParamName: "FolderId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/{folder_uid}:
    get:
      tags:
      - "folders"
      summary: "Get folder by uid."
      operationId: "getFolderByUID"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FolderUID"
        x-exportParamName: "FolderUid"
      responses:
        "200":
          description: ""
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "folders"
      summary: "Update folder."
      operationId: "updateFolder"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FolderUID"
        x-exportParamName: "FolderUid"
      - in: "body"
        name: "body"
        description: "To change the unique identifier (uid), provide another one.\n\
          To overwrite an existing folder with newer version, set `overwrite` to `true`.\n\
          Provide the current version to safelly update the folder: if the provided\
          \ version differs from the stored one the request will fail, unless `overwrite`\
          \ is `true`."
        required: true
        schema:
          $ref: "#/definitions/UpdateFolderCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Folder"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "folders"
      summary: "Delete folder."
      description: "Deletes an existing folder identified by UID along with all dashboards\
        \ (and their alerts) stored in the folder. This operation cannot be reverted."
      operationId: "deleteFolder"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FolderUID"
        x-exportParamName: "FolderUid"
      - name: "forceDeleteRules"
        in: "query"
        description: "If `true` any Grafana 8 Alerts under this folder will be deleted.\n\
          Set to `false` so that the request will fail if the folder contains any\
          \ Grafana 8 Alerts."
        required: false
        type: "boolean"
        default: false
        x-go-name: "ForceDeleteRules"
        x-exportParamName: "ForceDeleteRules"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /folders/{folder_uid}/permissions:
    get:
      tags:
      - "folder_permissions"
      summary: "Gets all existing permissions for the folder with the given `uid`."
      operationId: "getFolderPermissions"
      parameters:
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FolderUID"
        x-exportParamName: "FolderUid"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DashboardAclInfoDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "folder_permissions"
      summary: "Updates permissions for a folder. This operation will remove existing\
        \ permissions if they’re not included in the request."
      operationId: "updateFolderPermissions"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/UpdateDashboardAclCommand"
        x-exportParamName: "Body"
      - name: "folder_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FolderUID"
        x-exportParamName: "FolderUid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements:
    get:
      tags:
      - "library_elements"
      summary: "Get all library elements."
      description: "Returns a list of all library elements the authenticated user\
        \ has permission to view.\nUse the `perPage` query parameter to control the\
        \ maximum number of library elements returned; the default limit is `100`.\n\
        You can also use the `page` query parameter to fetch library elements from\
        \ any page other than the first one."
      operationId: "getLibraryElements"
      parameters:
      - name: "searchString"
        in: "query"
        description: "Part of the name or description searched for."
        required: false
        type: "string"
        x-go-name: "SearchString"
        x-exportParamName: "SearchString"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        description: "Kind of element to search for."
        required: false
        type: "integer"
        format: "int64"
        enum:
        - 1
        - 2
        x-go-name: "Kind"
        x-exportParamName: "Kind"
        x-optionalDataType: "Int64"
      - name: "sortDirection"
        in: "query"
        description: "Sort order of elements."
        required: false
        type: "string"
        enum:
        - "alpha-asc"
        - "alpha-desc"
        x-go-name: "SortDirection"
        x-exportParamName: "SortDirection"
        x-optionalDataType: "String"
      - name: "typeFilter"
        in: "query"
        description: "A comma separated list of types to filter the elements by"
        required: false
        type: "string"
        x-go-name: "TypeFilter"
        x-exportParamName: "TypeFilter"
        x-optionalDataType: "String"
      - name: "excludeUid"
        in: "query"
        description: "Element UID to exclude from search results."
        required: false
        type: "string"
        x-go-name: "ExcludeUID"
        x-exportParamName: "ExcludeUid"
        x-optionalDataType: "String"
      - name: "folderFilter"
        in: "query"
        description: "A comma separated list of folder ID(s) to filter the elements\
          \ by."
        required: false
        type: "string"
        x-go-name: "FolderFilter"
        x-exportParamName: "FolderFilter"
        x-optionalDataType: "String"
      - name: "perPage"
        in: "query"
        description: "The number of results per page."
        required: false
        type: "integer"
        default: 100
        format: "int64"
        x-go-name: "PerPage"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "The page for a set of records, given that only perPage records\
          \ are returned at a time. Numbering starts at 1."
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementSearchResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "library_elements"
      summary: "Create library element."
      description: "Creates a new library element."
      operationId: "createLibraryElement"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateLibraryElementCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/name/{library_element_name}:
    get:
      tags:
      - "library_elements"
      summary: "Get library element by name."
      description: "Returns a library element with the given name."
      operationId: "getLibraryElementByName"
      parameters:
      - name: "library_element_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "LibraryElementName"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/{library_element_uid}:
    get:
      tags:
      - "library_elements"
      summary: "Get library element by UID."
      description: "Returns a library element with the given UID."
      operationId: "getLibraryElementByUID"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "library_elements"
      summary: "Delete library element."
      description: "Deletes an existing library element as specified by the UID. This\
        \ operation cannot be reverted.\nYou cannot delete a library element that\
        \ is connected. This operation cannot be reverted."
      operationId: "deleteLibraryElementByUID"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "library_elements"
      summary: "Update library element."
      description: "Updates an existing library element identified by uid."
      operationId: "updateLibraryElement"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "LibraryElementUid"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PatchLibraryElementCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: "PreconditionFailedError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /library-elements/{library_element_uid}/connections/:
    get:
      tags:
      - "library_elements"
      summary: "Get library element connections."
      description: "Returns a list of connections for a library element based on the\
        \ UID specified."
      operationId: "getLibraryElementConnections"
      parameters:
      - name: "library_element_uid"
        in: "path"
        required: true
        type: "string"
        x-go-name: "UID"
        x-exportParamName: "LibraryElementUid"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/LibraryElementConnectionsResponse"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org:
    get:
      tags:
      - "org"
      description: "Get current Organization"
      operationId: "getOrg"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "org"
      summary: "Update current Organization."
      operationId: "updateOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/address:
    put:
      tags:
      - "org"
      summary: "Update current Organization's address."
      operationId: "updateOrgAddress"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgAddressForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/invites:
    get:
      tags:
      - "org_invites"
      summary: "Get pending invites."
      operationId: "getInvites"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TempUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "org_invites"
      summary: "Add invite."
      operationId: "addInvite"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddInviteForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "412":
          description: ""
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/preferences:
    get:
      tags:
      - "org_preferences"
      summary: "Get Current Org Prefs."
      operationId: "getOrgPreferences"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "org_preferences"
      summary: "Update Current Org Prefs."
      operationId: "updateOrgPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users:
    get:
      tags:
      - "org"
      summary: "Get all users within the current organization."
      description: "Returns all org users within the current organization. Accessible\
        \ to users with org admin role.\nIf you are running Grafana Enterprise and\
        \ have Fine-grained access control enabled\nyou need to have a permission\
        \ with action: `org.users:read` with scope `users:*`."
      operationId: "getOrgUsers"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "org"
      summary: "Add a new user to the current organization"
      description: "Adds a global user to the current organization.\n\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled\n\
        you need to have a permission with action: `org.users:add` with scope `users:*`."
      operationId: "addOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddOrgUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users/lookup:
    get:
      tags:
      - "org"
      summary: "Get all users within the current organization (lookup)"
      description: "Returns all org users within the current organization, but with\
        \ less detailed information.\nAccessible to users with org admin role, admin\
        \ in any folder or admin of any team.\nMainly used by Grafana UI for providing\
        \ list of users when adding team members and when editing folder/dashboard\
        \ permissions."
      operationId: "lookupOrgUsers"
      parameters:
      - name: "query"
        in: "query"
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserLookupDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/users/{user_id}:
    delete:
      tags:
      - "org"
      summary: "Delete user in current organization"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:remove`\
        \ with scope `users:*`."
      operationId: "deleteOrgUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "org"
      summary: "Updates the given user"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users.role:update`\
        \ with scope `users:*`."
      operationId: "updateOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /org/{invitation_code}/invites:
    delete:
      tags:
      - "org_invites"
      summary: "Revoke invite."
      operationId: "revokeInvite"
      parameters:
      - name: "invitation_code"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Code"
        x-exportParamName: "InvitationCode"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs:
    get:
      tags:
      - "orgs"
      description: "Search all Organizations"
      operationId: "searchOrg"
      parameters:
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "perpage"
        in: "query"
        description: "Number of items per page\nThe totalCount field in the response\
          \ can be used for pagination list E.g. if totalCount is equal to 100 teams\
          \ and the perpage parameter is set to 10 then there are 10 pages of teams."
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-go-name: "PerPage"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "If set it will return results where the query value is contained\
          \ in the name field. Query values with spaces need to be URL encoded."
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "orgs"
      summary: "Create Organization."
      description: "Only works if [users.allow_org_create](https://grafana.com/docs/grafana/latest/administration/configuration/#allow_org_create)\
        \ is set."
      operationId: "createOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateOrgCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_11"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/name/{org_name}:
    get:
      tags:
      - "orgs"
      summary: "Get Organization by ID."
      operationId: "getOrgByName"
      parameters:
      - name: "org_name"
        in: "path"
        required: true
        type: "string"
        x-go-name: "OrgName"
        x-exportParamName: "OrgName"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}:
    get:
      tags:
      - "orgs"
      summary: "Get Organization by ID."
      operationId: "getOrgByID"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/OrgDetailsDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "orgs"
      summary: "Update Organization."
      operationId: "adminUpdateOrg"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "orgs"
      summary: "Delete Organization."
      operationId: "adminDeleteOrg"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/address:
    put:
      tags:
      - "orgs"
      summary: "Update Organization's address."
      operationId: "adminUpdateOrgAddress"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgAddressForm"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/quotas:
    get:
      tags:
      - "orgs"
      summary: "Fetch Organization quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `orgs.quotas:read`\
        \ and scope `org:id:1` (orgIDScope).\nlist"
      operationId: "getOrgQuota"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/quotas/{quota_target}:
    put:
      tags:
      - "orgs"
      summary: "Update user quota."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled, you need to have a permission with action `orgs.quotas:write`\
        \ and scope `org:id:1` (orgIDScope)."
      operationId: "updateOrgQuota"
      parameters:
      - name: "quota_target"
        in: "path"
        required: true
        type: "string"
        x-go-name: "QuotaTarget"
        x-exportParamName: "QuotaTarget"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgQuotaCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/users:
    get:
      tags:
      - "orgs"
      summary: "Get Users in Organization."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:read`\
        \ with scope `users:*`."
      operationId: "adminGetOrgUsers"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrgUserDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "orgs"
      summary: "Add a new user to the current organization"
      description: "Adds a global user to the current organization.\n\nIf you are\
        \ running Grafana Enterprise and have Fine-grained access control enabled\n\
        you need to have a permission with action: `org.users:add` with scope `users:*`."
      operationId: "adminAddOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddOrgUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /orgs/{org_id}/users/{user_id}:
    delete:
      tags:
      - "orgs"
      summary: "Delete user in current organization"
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users:remove`\
        \ with scope `users:*`."
      operationId: "adminDeleteOrgUser"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    patch:
      tags:
      - "orgs"
      summary: "Update Users in Organization."
      description: "If you are running Grafana Enterprise and have Fine-grained access\
        \ control enabled\nyou need to have a permission with action: `org.users.role:update`\
        \ with scope `users:*`."
      operationId: "adminUpdateOrgUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateOrgUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /search:
    get:
      tags:
      - "search"
      operationId: "search"
      parameters:
      - name: "query"
        in: "query"
        description: "Search Query"
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "List of tags to search for"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-go-name: "Tag"
        x-exportParamName: "Tag"
      - name: "type"
        in: "query"
        description: "Type to search for, dash-folder or dash-db"
        required: false
        type: "string"
        enum:
        - "dash-folder"
        - "dash-db"
        x-go-name: "Type"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "dashboardIds"
        in: "query"
        description: "List of dashboard id’s to search for"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        x-go-name: "DashboardIds"
        x-exportParamName: "DashboardIds"
      - name: "folderIds"
        in: "query"
        description: "List of folder id’s to search in for dashboards"
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        x-go-name: "FolderIds"
        x-exportParamName: "FolderIds"
      - name: "starred"
        in: "query"
        description: "Flag indicating if only starred Dashboards should be returned"
        required: false
        type: "boolean"
        x-go-name: "Starred"
        x-exportParamName: "Starred"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned results (max 5000)"
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Use this parameter to access hits beyond limit. Numbering starts\
          \ at 1. limit param acts as page size. Only available in Grafana v6.2+."
        required: false
        type: "integer"
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "permission"
        in: "query"
        description: "Set to `Edit` to return dashboards/folders that the user can\
          \ edit"
        required: false
        type: "string"
        default: "View"
        enum:
        - "Edit"
        - "View"
        x-go-name: "Permission"
        x-exportParamName: "Permission"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort method; for listing all the possible sort methods use the\
          \ search sorting endpoint."
        required: false
        type: "string"
        default: "alpha-asc"
        enum:
        - "alpha-asc"
        - "alpha-desc"
        x-go-name: "Sort"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/HitList"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "422":
          description: "UnprocessableEntityError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /search/sorting:
    get:
      tags:
      - "search"
      description: "List search sorting options"
      operationId: "searchSorting"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_12"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshot/shared-options:
    get:
      tags:
      - "snapshot"
      summary: "Get snapshot sharing settings."
      operationId: "getSnapshotSharingOptions"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_13"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots:
    post:
      tags:
      - "snapshot"
      summary: "When creating a snapshot using the API, you have to provide the full\
        \ dashboard payload including the snapshot data. This endpoint is designed\
        \ for the Grafana UI."
      description: "Snapshot public mode should be enabled or authentication is required."
      operationId: "createSnapshot"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateDashboardSnapshotCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_14"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots-delete/{deleteKey}:
    get:
      tags:
      - "snapshot"
      summary: "Delete Snapshot by deleteKey."
      description: "Snapshot public mode should be enabled or authentication is required."
      operationId: "deleteSnapshotByDeleteKey"
      parameters:
      - name: "deleteKey"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DeleteKey"
        x-exportParamName: "DeleteKey"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /snapshots/{key}:
    get:
      tags:
      - "snapshot"
      summary: "Get Snapshot by Key."
      operationId: "getSnapshotByKey"
      parameters:
      - name: "key"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Key"
        x-exportParamName: "Key"
      responses:
        "200":
          description: ""
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "snapshot"
      summary: "Delete Snapshot by Key."
      operationId: "deleteSnapshotByKey"
      parameters:
      - name: "key"
        in: "path"
        required: true
        type: "string"
        x-go-name: "Key"
        x-exportParamName: "Key"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams:
    post:
      tags:
      - "teams"
      summary: "Add Team."
      operationId: "createTeam"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateTeamCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_15"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/search:
    get:
      tags:
      - "teams"
      summary: "Team Search With Paging."
      operationId: "searchTeams"
      parameters:
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      - name: "perpage"
        in: "query"
        description: "Number of items per page\nThe totalCount field in the response\
          \ can be used for pagination list E.g. if totalCount is equal to 100 teams\
          \ and the perpage parameter is set to 10 then there are 10 pages of teams."
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-go-name: "PerPage"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-go-name: "Name"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "If set it will return results where the query value is contained\
          \ in the name field. Query values with spaces need to be URL encoded."
        required: false
        type: "string"
        x-go-name: "Query"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchTeamQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}:
    get:
      tags:
      - "teams"
      summary: "Get Team By ID."
      operationId: "getTeam"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/TeamDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "teams"
      summary: "Update Team."
      operationId: "updateTeam"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateTeamCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "409":
          description: "ConflictError"
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "teams"
      summary: "Delete Team By ID."
      operationId: "deleteTeamByID"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/members:
    get:
      tags:
      - "teams"
      summary: "Get Team Members."
      operationId: "getTeamMembers"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    post:
      tags:
      - "teams"
      summary: "Add Team Member."
      operationId: "addTeamMember"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/members/{user_id}:
    put:
      tags:
      - "teams"
      summary: "Update Team Member."
      operationId: "updateTeamMember"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateTeamMemberCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "teams"
      summary: "Remove Member From Team."
      operationId: "removeTeamMember"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /teams/{team_id}/preferences:
    get:
      tags:
      - "teams"
      summary: "Get Team Preferences."
      operationId: "getTeamPreferences"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "teams"
      summary: "Update Team Preferences."
      operationId: "updateTeamPreferences"
      parameters:
      - name: "team_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "TeamID"
        x-exportParamName: "TeamId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /tsdb/query:
    post:
      tags:
      - "datasources"
      summary: "Query metrics."
      description: "Queries a data source having backend implementation.\n\nMost of\
        \ Grafana’s builtin data sources have backend implementation."
      operationId: "queryDatasource"
      parameters:
      - in: "body"
        name: "Body"
        required: true
        schema:
          $ref: "#/definitions/MetricRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/DataResponse"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user:
    get:
      tags:
      - "user"
      summary: "Get signed in User."
      operationId: "getSignedInUser"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "user"
      summary: "Update signed in User."
      operationId: "updateSignedInUser"
      parameters:
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/UpdateUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/auth-tokens:
    get:
      tags:
      - "user"
      summary: "Auth tokens of the actual User."
      description: "Return a list of all auth tokens (devices) that the actual user\
        \ currently have logged in from."
      operationId: "getSignedInUserAuthTokens"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserToken"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/helpflags/clear:
    get:
      tags:
      - "user"
      summary: "Clear user help flag."
      operationId: "clearHelpFlags"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_16"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/helpflags/{flag_id}:
    put:
      tags:
      - "user"
      summary: "Set user help flag."
      operationId: "setHelpFlag"
      parameters:
      - name: "flag_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "FlagID"
        x-exportParamName: "FlagId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/inline_response_200_16"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/orgs:
    get:
      tags:
      - "user"
      summary: "Organizations of the actual User."
      description: "Return a list of all organizations of the current user."
      operationId: "getSignedInUserOrgList"
      parameters: []
      security:
      - basic: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/password:
    put:
      tags:
      - "user"
      summary: "Change Password."
      description: "Changes the password for the user."
      operationId: "changeUserPassword"
      parameters:
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/ChangeUserPasswordCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      security:
      - basic: []
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/preferences:
    get:
      tags:
      - "user_preferences"
      summary: "Get user preferences."
      operationId: "getUserPreferences"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Prefs"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "user_preferences"
      summary: "Update user preferences."
      description: "Omitting a key (`theme`, `homeDashboardId`, `timezone`) will cause\
        \ the current value to be replaced with the system default value."
      operationId: "updateUserPreferences"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdatePrefsCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/quotas:
    get:
      tags:
      - "user"
      summary: "Fetch user quota."
      operationId: "getUserQuotas"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserQuotaDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/revoke-auth-token:
    post:
      tags:
      - "user"
      summary: "Revoke an auth token of the actual User."
      description: "Revokes the given auth token (device) for the actual user. User\
        \ of issued auth token (device) will no longer be logged in and will be required\
        \ to authenticate again upon next activity."
      operationId: "revokeSignedINAuthTokenCmd"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RevokeAuthTokenCmd"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/stars/dashboard/{dashboard_id}:
    post:
      tags:
      - "user"
      summary: "Star a dashboard."
      description: "Stars the given Dashboard for the actual user."
      operationId: "starDashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DashboardID"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    delete:
      tags:
      - "user"
      summary: "Unstar a dashboard."
      description: "Deletes the starring of the given Dashboard for the actual user."
      operationId: "unstarDashboard"
      parameters:
      - name: "dashboard_id"
        in: "path"
        required: true
        type: "string"
        x-go-name: "DashboardID"
        x-exportParamName: "DashboardId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/teams:
    get:
      tags:
      - "user"
      summary: "Teams that the actual User is member of."
      description: "Return a list of all teams that the current user is member of."
      operationId: "getSignedInUserTeamList"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /user/using/{org_id}:
    post:
      tags:
      - "user"
      summary: "Switch user context for signed in user."
      description: "Switch user context to the given organization."
      operationId: "userSetUsingOrg"
      parameters:
      - name: "org_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
        x-exportParamName: "OrgId"
      responses:
        "200":
          description: "An OKResponse is returned if the request was successful."
          schema:
            $ref: "#/definitions/SuccessResponseBody"
        "400":
          description: "BadRequestError is returned when the request is invalid and\
            \ it cannot be processed."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users:
    get:
      tags:
      - "users"
      summary: "Get users."
      description: "Returns all users that the authenticated user has permission to\
        \ view, admin permission required."
      operationId: "searchUsers"
      parameters:
      - name: "perpage"
        in: "query"
        description: "Limit the maximum number of users to return per page"
        required: false
        type: "integer"
        default: 1000
        format: "int64"
        x-go-name: "Limit"
        x-exportParamName: "Perpage"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "Page index for starting fetching users"
        required: false
        type: "integer"
        default: 1
        format: "int64"
        x-go-name: "Page"
        x-exportParamName: "Page"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchUserQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/lookup:
    get:
      tags:
      - "users"
      summary: "Get user by login or email."
      operationId: "getUserByLoginOrEmail"
      parameters:
      - name: "loginOrEmail"
        in: "query"
        description: "loginOrEmail of the user"
        required: true
        type: "string"
        x-go-name: "LoginOrEmail"
        x-exportParamName: "LoginOrEmail"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/search:
    get:
      tags:
      - "users"
      summary: "Get users with paging."
      operationId: "searchUsersWithPaging"
      parameters: []
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SearchUserQueryResult"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}:
    get:
      tags:
      - "users"
      summary: "Get user by id."
      operationId: "getUserByID"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
    put:
      tags:
      - "users"
      summary: "Update user."
      description: "Update the user identified by id."
      operationId: "updateUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      - in: "body"
        name: "body"
        description: "To change the email, name, login, theme, provide another one."
        required: true
        schema:
          $ref: "#/definitions/UpdateUserCommand"
        x-go-name: "Body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/UserProfileDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}/orgs:
    get:
      tags:
      - "users"
      summary: "Get organizations for user."
      description: "Get organizations for user identified by id."
      operationId: "getUserOrgList"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserOrgDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
  /users/{user_id}/teams:
    get:
      tags:
      - "users"
      summary: "Get teams for user."
      description: "Get teams for user identified by id."
      operationId: "getUserTeams"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TeamDTO"
        "401":
          description: "UnauthorizedError is returned when the request is not authenticated."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "403":
          description: "ForbiddenError is returned if the user/token has insufficient\
            \ permissions to access the requested resource."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "404":
          description: "NotFoundError is returned when the requested resource was\
            \ not found."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
        "500":
          description: "InternalServerError is a general error indicating something\
            \ went wrong internally."
          schema:
            $ref: "#/definitions/ErrorResponseBody"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  basic:
    type: "basic"
definitions:
  AddApiKeyCommand:
    type: "object"
    properties:
      createServiceAccount:
        type: "boolean"
        x-go-name: "CreateNewServiceAccount"
      name:
        type: "string"
        x-go-name: "Name"
      role:
        $ref: "#/definitions/RoleType"
      secondsToLive:
        type: "integer"
        format: "int64"
        x-go-name: "SecondsToLive"
      serviceAccount:
        type: "integer"
        format: "int64"
        x-go-name: "ServiceAccountId"
    description: "COMMANDS"
    example:
      role: {}
      createServiceAccount: true
      name: "name"
      secondsToLive: 0
      serviceAccount: 6
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AddDataSourceCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/DataSource"
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
        x-go-name: "BasicAuth"
      basicAuthPassword:
        type: "string"
        x-go-name: "BasicAuthPassword"
      basicAuthUser:
        type: "string"
        x-go-name: "BasicAuthUser"
      database:
        type: "string"
        x-go-name: "Database"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
        x-go-name: "Name"
      password:
        type: "string"
        x-go-name: "Password"
      secureJsonData:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureJsonData"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
      url:
        type: "string"
        x-go-name: "Url"
      user:
        type: "string"
        x-go-name: "User"
      withCredentials:
        type: "boolean"
        x-go-name: "WithCredentials"
    description: "Also acts as api DTO"
    example:
      access: {}
      basicAuthUser: "basicAuthUser"
      basicAuth: true
      basicAuthPassword: "basicAuthPassword"
      type: "type"
      url: "url"
      Result:
        access: {}
        basicAuthUser: "basicAuthUser"
        basicAuth: true
        basicAuthPassword: "basicAuthPassword"
        readOnly: true
        typeLogoUrl: "typeLogoUrl"
        type: "type"
        version: 1
        orgId: 6
        url: "url"
        uid: "uid"
        database: "database"
        isDefault: true
        password: "password"
        jsonData: {}
        withCredentials: true
        name: "name"
        id: 0
        user: "user"
        secureJsonFields:
          key: true
      uid: "uid"
      database: "database"
      isDefault: true
      password: "password"
      secureJsonData:
        key: "secureJsonData"
      jsonData: {}
      withCredentials: true
      name: "name"
      user: "user"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AddInviteForm:
    type: "object"
    properties:
      loginOrEmail:
        type: "string"
        x-go-name: "LoginOrEmail"
      name:
        type: "string"
        x-go-name: "Name"
      role:
        $ref: "#/definitions/RoleType"
      sendEmail:
        type: "boolean"
        x-go-name: "SendEmail"
    example:
      sendEmail: true
      role: {}
      name: "name"
      loginOrEmail: "loginOrEmail"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AddOrgUserCommand:
    type: "object"
    properties:
      loginOrEmail:
        type: "string"
        x-go-name: "LoginOrEmail"
      role:
        $ref: "#/definitions/RoleType"
    example:
      role: {}
      loginOrEmail: "loginOrEmail"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AddTeamMemberCommand:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  Address:
    type: "object"
    properties:
      address1:
        type: "string"
        x-go-name: "Address1"
      address2:
        type: "string"
        x-go-name: "Address2"
      city:
        type: "string"
        x-go-name: "City"
      country:
        type: "string"
        x-go-name: "Country"
      state:
        type: "string"
        x-go-name: "State"
      zipCode:
        type: "string"
        x-go-name: "ZipCode"
    example:
      country: "country"
      zipCode: "zipCode"
      address2: "address2"
      city: "city"
      address1: "address1"
      state: "state"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AdminCreateUserForm:
    type: "object"
    properties:
      email:
        type: "string"
        x-go-name: "Email"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      password:
        type: "string"
        x-go-name: "Password"
    example:
      password: "password"
      name: "name"
      login: "login"
      email: "email"
      orgId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AdminStats:
    type: "object"
    properties:
      activeAdmins:
        type: "integer"
        format: "int64"
        x-go-name: "ActiveAdmins"
      activeEditors:
        type: "integer"
        format: "int64"
        x-go-name: "ActiveEditors"
      activeSessions:
        type: "integer"
        format: "int64"
        x-go-name: "ActiveSessions"
      activeUsers:
        type: "integer"
        format: "int64"
        x-go-name: "ActiveUsers"
      activeViewers:
        type: "integer"
        format: "int64"
        x-go-name: "ActiveViewers"
      admins:
        type: "integer"
        format: "int64"
        x-go-name: "Admins"
      alerts:
        type: "integer"
        format: "int64"
        x-go-name: "Alerts"
      dailyActiveAdmins:
        type: "integer"
        format: "int64"
        x-go-name: "DailyActiveAdmins"
      dailyActiveEditors:
        type: "integer"
        format: "int64"
        x-go-name: "DailyActiveEditors"
      dailyActiveSessions:
        type: "integer"
        format: "int64"
        x-go-name: "DailyActiveSessions"
      dailyActiveUsers:
        type: "integer"
        format: "int64"
        x-go-name: "DailyActiveUsers"
      dailyActiveViewers:
        type: "integer"
        format: "int64"
        x-go-name: "DailyActiveViewers"
      dashboards:
        type: "integer"
        format: "int64"
        x-go-name: "Dashboards"
      datasources:
        type: "integer"
        format: "int64"
        x-go-name: "Datasources"
      editors:
        type: "integer"
        format: "int64"
        x-go-name: "Editors"
      monthlyActiveUsers:
        type: "integer"
        format: "int64"
        x-go-name: "MonthlyActiveUsers"
      orgs:
        type: "integer"
        format: "int64"
        x-go-name: "Orgs"
      playlists:
        type: "integer"
        format: "int64"
        x-go-name: "Playlists"
      snapshots:
        type: "integer"
        format: "int64"
        x-go-name: "Snapshots"
      stars:
        type: "integer"
        format: "int64"
        x-go-name: "Stars"
      tags:
        type: "integer"
        format: "int64"
        x-go-name: "Tags"
      users:
        type: "integer"
        format: "int64"
        x-go-name: "Users"
      viewers:
        type: "integer"
        format: "int64"
        x-go-name: "Viewers"
    example:
      dailyActiveAdmins: 9
      dailyActiveSessions: 2
      playlists: 1
      activeUsers: 5
      activeEditors: 6
      stars: 5
      dailyActiveUsers: 4
      dashboards: 1
      users: 9
      tags: 9
      alerts: 7
      snapshots: 4
      activeAdmins: 0
      viewers: 6
      datasources: 1
      activeSessions: 1
      dailyActiveEditors: 3
      dailyActiveViewers: 7
      orgs: 7
      activeViewers: 5
      monthlyActiveUsers: 6
      admins: 2
      editors: 1
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AdminUpdateUserPasswordForm:
    type: "object"
    properties:
      password:
        type: "string"
        x-go-name: "Password"
    example:
      password: "password"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AdminUpdateUserPermissionsForm:
    type: "object"
    properties:
      isGrafanaAdmin:
        type: "boolean"
        x-go-name: "IsGrafanaAdmin"
    example:
      isGrafanaAdmin: true
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  Alert:
    type: "object"
    properties:
      Created:
        type: "string"
        format: "date-time"
      DashboardId:
        type: "integer"
        format: "int64"
      EvalData:
        $ref: "#/definitions/Json"
      ExecutionError:
        type: "string"
      For:
        $ref: "#/definitions/Duration"
      Frequency:
        type: "integer"
        format: "int64"
      Handler:
        type: "integer"
        format: "int64"
      Id:
        type: "integer"
        format: "int64"
      Message:
        type: "string"
      Name:
        type: "string"
      NewStateDate:
        type: "string"
        format: "date-time"
      OrgId:
        type: "integer"
        format: "int64"
      PanelId:
        type: "integer"
        format: "int64"
      Settings:
        $ref: "#/definitions/Json"
      Severity:
        type: "string"
      Silenced:
        type: "boolean"
      State:
        $ref: "#/definitions/AlertStateType"
      StateChanges:
        type: "integer"
        format: "int64"
      Updated:
        type: "string"
        format: "date-time"
      Version:
        type: "integer"
        format: "int64"
    example:
      ExecutionError: "ExecutionError"
      Message: "Message"
      Updated: "2000-01-23T04:56:07.000+00:00"
      For: {}
      Handler: 1
      PanelId: 2
      NewStateDate: "2000-01-23T04:56:07.000+00:00"
      Severity: "Severity"
      DashboardId: 0
      EvalData: {}
      Created: "2000-01-23T04:56:07.000+00:00"
      Name: "Name"
      OrgId: 5
      Version: 9
      State: {}
      StateChanges: 7
      Frequency: 6
      Id: 5
      Silenced: true
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AlertListItemDTO:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      dashboardSlug:
        type: "string"
        x-go-name: "DashboardSlug"
      dashboardUid:
        type: "string"
        x-go-name: "DashboardUid"
      evalData:
        $ref: "#/definitions/Json"
      evalDate:
        type: "string"
        format: "date-time"
        x-go-name: "EvalDate"
      executionError:
        type: "string"
        x-go-name: "ExecutionError"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
      newStateDate:
        type: "string"
        format: "date-time"
        x-go-name: "NewStateDate"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
      state:
        $ref: "#/definitions/AlertStateType"
      url:
        type: "string"
        x-go-name: "Url"
    example:
      panelId: 1
      evalDate: "2000-01-23T04:56:07.000+00:00"
      dashboardId: 0
      dashboardUid: "dashboardUid"
      newStateDate: "2000-01-23T04:56:07.000+00:00"
      evalData: {}
      name: "name"
      id: 6
      state: {}
      executionError: "executionError"
      dashboardSlug: "dashboardSlug"
      url: "url"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AlertNotification:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      frequency:
        type: "string"
        x-go-name: "Frequency"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      name:
        type: "string"
        x-go-name: "Name"
      secureFields:
        type: "object"
        additionalProperties:
          type: "boolean"
        x-go-name: "SecureFields"
      sendReminder:
        type: "boolean"
        x-go-name: "SendReminder"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
    example:
      settings: {}
      uid: "uid"
      isDefault: true
      disableResolveMessage: true
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      sendReminder: true
      id: 0
      secureFields:
        key: true
      type: "type"
      updated: "2000-01-23T04:56:07.000+00:00"
      frequency: "frequency"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AlertNotificationLookup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      name:
        type: "string"
        x-go-name: "Name"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
    example:
      uid: "uid"
      isDefault: true
      name: "name"
      id: 0
      type: "type"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AlertStateInfoDTO:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      newStateDate:
        type: "string"
        format: "date-time"
        x-go-name: "NewStateDate"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
      state:
        $ref: "#/definitions/AlertStateType"
    example:
      panelId: 1
      dashboardId: 0
      newStateDate: "2000-01-23T04:56:07.000+00:00"
      id: 6
      state: {}
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AlertStateType:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  AlertTestCommand:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
    example:
      panelId: 0
      dashboard: {}
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AlertTestResult:
    type: "object"
    properties:
      conditionEvals:
        type: "string"
        x-go-name: "ConditionEvals"
      error:
        type: "string"
        x-go-name: "Error"
      firing:
        type: "boolean"
        x-go-name: "Firing"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/AlertTestResultLog"
        x-go-name: "Logs"
      matches:
        type: "array"
        items:
          $ref: "#/definitions/EvalMatch"
        x-go-name: "EvalMatches"
      state:
        $ref: "#/definitions/AlertStateType"
      timeMs:
        type: "string"
        x-go-name: "TimeMs"
    example:
      conditionEvals: "conditionEvals"
      firing: true
      state: {}
      error: "error"
      logs:
      - data: "{}"
        message: "message"
      - data: "{}"
        message: "message"
      matches:
      - metric: "metric"
        value:
          Float64: 0.8008281904610115
          Valid: true
        tags:
          key: "tags"
      - metric: "metric"
        value:
          Float64: 0.8008281904610115
          Valid: true
        tags:
          key: "tags"
      timeMs: "timeMs"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  AlertTestResultLog:
    type: "object"
    properties:
      data:
        type: "object"
        properties: {}
        x-go-name: "Data"
      message:
        type: "string"
        x-go-name: "Message"
    example:
      data: "{}"
      message: "message"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  ApiKeyDTO:
    type: "object"
    properties:
      expiration:
        type: "string"
        format: "date-time"
        x-go-name: "Expiration"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
      role:
        $ref: "#/definitions/RoleType"
    example:
      role: {}
      name: "name"
      expiration: "2000-01-23T04:56:07.000+00:00"
      id: 0
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CalculateDiffTarget:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      unsavedDashboard:
        $ref: "#/definitions/Json"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    example:
      dashboardId: 0
      unsavedDashboard: {}
      version: 6
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  ChangeUserPasswordCommand:
    type: "object"
    properties:
      newPassword:
        type: "string"
        x-go-name: "NewPassword"
      oldPassword:
        type: "string"
        x-go-name: "OldPassword"
    example:
      oldPassword: "oldPassword"
      newPassword: "newPassword"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CreateAlertNotificationCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/AlertNotification"
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      frequency:
        type: "string"
        x-go-name: "Frequency"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      name:
        type: "string"
        x-go-name: "Name"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureSettings"
      sendReminder:
        type: "boolean"
        x-go-name: "SendReminder"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
    example:
      settings: {}
      uid: "uid"
      isDefault: true
      disableResolveMessage: true
      secureSettings:
        key: "secureSettings"
      name: "name"
      sendReminder: true
      type: "type"
      Result:
        settings: {}
        uid: "uid"
        isDefault: true
        disableResolveMessage: true
        created: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        sendReminder: true
        id: 0
        secureFields:
          key: true
        type: "type"
        updated: "2000-01-23T04:56:07.000+00:00"
        frequency: "frequency"
      frequency: "frequency"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CreateDashboardSnapshotCommand:
    type: "object"
    required:
    - "dashboard"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      deleteKey:
        type: "string"
        description: "Unique key used to delete the snapshot. It is different from\
          \ the `key` so that only the creator can delete the snapshot. Required if\
          \ `external` is `true`."
        x-go-name: "DeleteKey"
      expires:
        type: "integer"
        format: "int64"
        description: "When the snapshot should expire in seconds in seconds. Default\
          \ is never to expire."
        default: 0
        x-go-name: "Expires"
      external:
        type: "boolean"
        description: "Save the snapshot on an external server rather than locally."
        default: false
        x-go-name: "External"
      key:
        type: "string"
        description: "Define the unique key. Required if `external` is `true`."
        x-go-name: "Key"
      name:
        type: "string"
        description: "Snapshot name"
        x-go-name: "Name"
    description: "CreateDashboardSnapshotCommand is same as models.CreateDashboardSnapshotCommand\
      \ but with swagger annotations"
    example:
      expires: 0
      external: false
      name: "name"
      deleteKey: "deleteKey"
      dashboard: {}
      key: "key"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  CreateFolderCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/Folder"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "Uid"
    example:
      uid: "uid"
      title: "title"
      Result:
        updatedBy: "updatedBy"
        created: "2000-01-23T04:56:07.000+00:00"
        canEdit: true
        canSave: true
        title: "title"
        version: 6
        url: "url"
        uid: "uid"
        hasAcl: true
        createdBy: "createdBy"
        canAdmin: true
        id: 0
        updated: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CreateLibraryElementCommand:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
        description: "ID of the folder where the library element is stored."
        x-go-name: "FolderID"
      kind:
        type: "integer"
        format: "int64"
        description: "Kind of element to create, Use 1 for library panels or 2 for\
          \ c.\nDescription:\n1 - library panels\n2 - library variables"
        enum:
        - 1
        - 2
        x-go-name: "Kind"
      model:
        type: "object"
        description: "The JSON model for the library element."
        properties: {}
        x-go-name: "Model"
      name:
        type: "string"
        description: "Name of the library element."
        x-go-name: "Name"
      uid:
        type: "string"
        x-go-name: "UID"
    description: "CreateLibraryElementCommand is same as libraryelements.LibraryElementSearchResponse\
      \ with swagger annotations"
    example:
      uid: "uid"
      kind: 6
      name: "name"
      model: "{}"
      folderId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  CreateOrgCommand:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  CreateTeamCommand:
    type: "object"
    properties:
      email:
        type: "string"
        x-go-name: "Email"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
      email: "email"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  Dashboard:
    type: "object"
    properties:
      Created:
        type: "string"
        format: "date-time"
      CreatedBy:
        type: "integer"
        format: "int64"
      Data:
        $ref: "#/definitions/Json"
      FolderId:
        type: "integer"
        format: "int64"
      GnetId:
        type: "integer"
        format: "int64"
      HasAcl:
        type: "boolean"
      Id:
        type: "integer"
        format: "int64"
      IsFolder:
        type: "boolean"
      OrgId:
        type: "integer"
        format: "int64"
      PluginId:
        type: "string"
      Slug:
        type: "string"
      Title:
        type: "string"
      Uid:
        type: "string"
      Updated:
        type: "string"
        format: "date-time"
      UpdatedBy:
        type: "integer"
        format: "int64"
      Version:
        type: "integer"
        format: "int64"
    description: "Dashboard model"
    example:
      CreatedBy: 0
      Updated: "2000-01-23T04:56:07.000+00:00"
      Title: "Title"
      Data: {}
      FolderId: 6
      PluginId: "PluginId"
      Slug: "Slug"
      Created: "2000-01-23T04:56:07.000+00:00"
      OrgId: 5
      Uid: "Uid"
      UpdatedBy: 2
      GnetId: 1
      Version: 7
      HasAcl: true
      Id: 5
      IsFolder: true
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardAclInfoDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderId"
      inherited:
        type: "boolean"
        x-go-name: "Inherited"
      isFolder:
        type: "boolean"
        x-go-name: "IsFolder"
      permission:
        $ref: "#/definitions/PermissionType"
      permissionName:
        type: "string"
        x-go-name: "PermissionName"
      role:
        $ref: "#/definitions/RoleType"
      slug:
        type: "string"
        x-go-name: "Slug"
      team:
        type: "string"
        x-go-name: "Team"
      teamAvatarUrl:
        type: "string"
        x-go-name: "TeamAvatarUrl"
      teamEmail:
        type: "string"
        x-go-name: "TeamEmail"
      teamId:
        type: "integer"
        format: "int64"
        x-go-name: "TeamId"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "Uid"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      url:
        type: "string"
        x-go-name: "Url"
      userAvatarUrl:
        type: "string"
        x-go-name: "UserAvatarUrl"
      userEmail:
        type: "string"
        x-go-name: "UserEmail"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
      userLogin:
        type: "string"
        x-go-name: "UserLogin"
    example:
      role: {}
      created: "2000-01-23T04:56:07.000+00:00"
      userAvatarUrl: "userAvatarUrl"
      permission: {}
      teamEmail: "teamEmail"
      team: "team"
      title: "title"
      userId: 5
      folderId: 6
      url: "url"
      userLogin: "userLogin"
      uid: "uid"
      isFolder: true
      dashboardId: 0
      inherited: true
      teamId: 1
      userEmail: "userEmail"
      updated: "2000-01-23T04:56:07.000+00:00"
      slug: "slug"
      teamAvatarUrl: "teamAvatarUrl"
      permissionName: "permissionName"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardAclUpdateItem:
    type: "object"
    properties:
      permission:
        type: "integer"
        format: "int64"
        description: "Permission level\nDescription:\n`1` - View\n`2` - Edit\n`4`\
          \ - Admin"
        enum:
        - 1
        - 2
        - 4
        x-go-name: "Permission"
      role:
        $ref: "#/definitions/RoleType"
      teamId:
        type: "integer"
        format: "int64"
        x-go-name: "TeamID"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
    description: "DashboardAclUpdateItem is same as dtos.DashboardAclUpdateItem but\
      \ with swagger annotations"
    example:
      role: {}
      teamId: 6
      permission: 0
      userId: 1
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  DashboardFullWithMeta:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/DashboardMeta"
    example:
      meta:
        expires: "2000-01-23T04:56:07.000+00:00"
        updatedBy: "updatedBy"
        canStar: true
        created: "2000-01-23T04:56:07.000+00:00"
        canEdit: true
        canSave: true
        isStarred: true
        isHome: true
        provisionedExternalId: "provisionedExternalId"
        type: "type"
        version: 6
        folderId: 0
        url: "url"
        folderTitle: "folderTitle"
        folderUrl: "folderUrl"
        folderUid: "folderUid"
        isFolder: true
        hasAcl: true
        provisioned: true
        createdBy: "createdBy"
        canAdmin: true
        isSnapshot: true
        updated: "2000-01-23T04:56:07.000+00:00"
        slug: "slug"
      dashboard: {}
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DashboardMeta:
    type: "object"
    properties:
      canAdmin:
        type: "boolean"
        x-go-name: "CanAdmin"
      canEdit:
        type: "boolean"
        x-go-name: "CanEdit"
      canSave:
        type: "boolean"
        x-go-name: "CanSave"
      canStar:
        type: "boolean"
        x-go-name: "CanStar"
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      expires:
        type: "string"
        format: "date-time"
        x-go-name: "Expires"
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderId"
      folderTitle:
        type: "string"
        x-go-name: "FolderTitle"
      folderUid:
        type: "string"
        x-go-name: "FolderUid"
      folderUrl:
        type: "string"
        x-go-name: "FolderUrl"
      hasAcl:
        type: "boolean"
        x-go-name: "HasAcl"
      isFolder:
        type: "boolean"
        x-go-name: "IsFolder"
      isHome:
        type: "boolean"
        x-go-name: "IsHome"
      isSnapshot:
        type: "boolean"
        x-go-name: "IsSnapshot"
      isStarred:
        type: "boolean"
        x-go-name: "IsStarred"
      provisioned:
        type: "boolean"
        x-go-name: "Provisioned"
      provisionedExternalId:
        type: "string"
        x-go-name: "ProvisionedExternalId"
      slug:
        type: "string"
        x-go-name: "Slug"
      type:
        type: "string"
        x-go-name: "Type"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      updatedBy:
        type: "string"
        x-go-name: "UpdatedBy"
      url:
        type: "string"
        x-go-name: "Url"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    example:
      expires: "2000-01-23T04:56:07.000+00:00"
      updatedBy: "updatedBy"
      canStar: true
      created: "2000-01-23T04:56:07.000+00:00"
      canEdit: true
      canSave: true
      isStarred: true
      isHome: true
      provisionedExternalId: "provisionedExternalId"
      type: "type"
      version: 6
      folderId: 0
      url: "url"
      folderTitle: "folderTitle"
      folderUrl: "folderUrl"
      folderUid: "folderUid"
      isFolder: true
      hasAcl: true
      provisioned: true
      createdBy: "createdBy"
      canAdmin: true
      isSnapshot: true
      updated: "2000-01-23T04:56:07.000+00:00"
      slug: "slug"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DashboardRedirect:
    type: "object"
    properties:
      redirectUri:
        type: "string"
        x-go-name: "RedirectUri"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DashboardSnapshotDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      expires:
        type: "string"
        format: "date-time"
        x-go-name: "Expires"
      external:
        type: "boolean"
        x-go-name: "External"
      externalUrl:
        type: "string"
        x-go-name: "ExternalUrl"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      key:
        type: "string"
        x-go-name: "Key"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    description: "DashboardSnapshotDTO without dashboard map"
    example:
      externalUrl: "externalUrl"
      expires: "2000-01-23T04:56:07.000+00:00"
      external: true
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: 0
      updated: "2000-01-23T04:56:07.000+00:00"
      userId: 1
      key: "key"
      orgId: 6
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardTagCloudItem:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
        x-go-name: "Count"
      term:
        type: "string"
        x-go-name: "Term"
    example:
      count: 0
      term: "term"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardVersionDTO:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      message:
        type: "string"
        x-go-name: "Message"
      parentVersion:
        type: "integer"
        format: "int64"
        x-go-name: "ParentVersion"
      restoredFrom:
        type: "integer"
        format: "int64"
        x-go-name: "RestoredFrom"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    description: "DashboardVersionDTO represents a dashboard version, without the\
      \ dashboard\nmap."
    example:
      createdBy: "createdBy"
      dashboardId: 0
      created: "2000-01-23T04:56:07.000+00:00"
      id: 6
      restoredFrom: 5
      message: "message"
      version: 5
      parentVersion: 1
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DashboardVersionMeta:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      data:
        $ref: "#/definitions/Json"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      message:
        type: "string"
        x-go-name: "Message"
      parentVersion:
        type: "integer"
        format: "int64"
        x-go-name: "ParentVersion"
      restoredFrom:
        type: "integer"
        format: "int64"
        x-go-name: "RestoredFrom"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    description: "DashboardVersionMeta extends the dashboard version model with the\
      \ names\nassociated with the UserIds, overriding the field with the same name\
      \ from\nthe DashboardVersion model."
    example:
      data: {}
      createdBy: "createdBy"
      dashboardId: 0
      created: "2000-01-23T04:56:07.000+00:00"
      id: 6
      restoredFrom: 5
      message: "message"
      version: 5
      parentVersion: 1
    x-go-package: "github.com/grafana/grafana/pkg/models"
  DataFrames:
    type: "object"
    title: "DataFrames is an interface for retrieving encoded and decoded data frames."
    description: "See NewDecodedDataFrames and NewEncodedDataFrames for more information."
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataQueryResult:
    type: "object"
    properties:
      dataframes:
        $ref: "#/definitions/DataFrames"
      error:
        type: "string"
        x-go-name: "ErrorString"
      meta:
        $ref: "#/definitions/Json"
      refId:
        type: "string"
        x-go-name: "RefID"
      series:
        $ref: "#/definitions/DataTimeSeriesSlice"
      tables:
        type: "array"
        items:
          $ref: "#/definitions/DataTable"
        x-go-name: "Tables"
    description: "Deprecated: DataQueryResult should use backend.QueryDataResponse"
    example:
      tables:
      - columns:
        - text: "text"
        - text: "text"
        rows:
        - ""
        - ""
      - columns:
        - text: "text"
        - text: "text"
        rows:
        - ""
        - ""
      dataframes: {}
      meta: {}
      series: ""
      refId: "refId"
      error: "error"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataResponse:
    type: "object"
    properties:
      message:
        type: "string"
        x-go-name: "Message"
      results:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/DataQueryResult"
        x-go-name: "Results"
    description: "Deprecated: DataResponse -- this structure is deprecated, all new\
      \ work should use backend.QueryDataResponse"
    example:
      message: "message"
      results:
        key:
          tables:
          - columns:
            - text: "text"
            - text: "text"
            rows:
            - ""
            - ""
          - columns:
            - text: "text"
            - text: "text"
            rows:
            - ""
            - ""
          dataframes: {}
          meta: {}
          series: ""
          refId: "refId"
          error: "error"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataRowValues:
    type: "array"
    items:
      type: "object"
      properties: {}
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataSource:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
        x-go-name: "BasicAuth"
      basicAuthPassword:
        type: "string"
        x-go-name: "BasicAuthPassword"
      basicAuthUser:
        type: "string"
        x-go-name: "BasicAuthUser"
      database:
        type: "string"
        x-go-name: "Database"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      password:
        type: "string"
        x-go-name: "Password"
      readOnly:
        type: "boolean"
        x-go-name: "ReadOnly"
      secureJsonFields:
        type: "object"
        additionalProperties:
          type: "boolean"
        x-go-name: "SecureJsonFields"
      type:
        type: "string"
        x-go-name: "Type"
      typeLogoUrl:
        type: "string"
        x-go-name: "TypeLogoUrl"
      uid:
        type: "string"
        x-go-name: "UID"
      url:
        type: "string"
        x-go-name: "Url"
      user:
        type: "string"
        x-go-name: "User"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
      withCredentials:
        type: "boolean"
        x-go-name: "WithCredentials"
    example:
      access: {}
      basicAuthUser: "basicAuthUser"
      basicAuth: true
      basicAuthPassword: "basicAuthPassword"
      readOnly: true
      typeLogoUrl: "typeLogoUrl"
      type: "type"
      version: 1
      orgId: 6
      url: "url"
      uid: "uid"
      database: "database"
      isDefault: true
      password: "password"
      jsonData: {}
      withCredentials: true
      name: "name"
      id: 0
      user: "user"
      secureJsonFields:
        key: true
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DataSourceList:
    type: "array"
    items:
      $ref: "#/definitions/DataSourceListItemDTO"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DataSourceListItemDTO:
    type: "object"
    properties:
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
        x-go-name: "BasicAuth"
      database:
        type: "string"
        x-go-name: "Database"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      password:
        type: "string"
        x-go-name: "Password"
      readOnly:
        type: "boolean"
        x-go-name: "ReadOnly"
      type:
        type: "string"
        x-go-name: "Type"
      typeLogoUrl:
        type: "string"
        x-go-name: "TypeLogoUrl"
      typeName:
        type: "string"
        x-go-name: "TypeName"
      uid:
        type: "string"
        x-go-name: "UID"
      url:
        type: "string"
        x-go-name: "Url"
      user:
        type: "string"
        x-go-name: "User"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DataTable:
    type: "object"
    properties:
      columns:
        type: "array"
        items:
          $ref: "#/definitions/DataTableColumn"
        x-go-name: "Columns"
      rows:
        type: "array"
        items:
          $ref: "#/definitions/DataRowValues"
        x-go-name: "Rows"
    example:
      columns:
      - text: "text"
      - text: "text"
      rows:
      - ""
      - ""
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataTableColumn:
    type: "object"
    properties:
      text:
        type: "string"
        x-go-name: "Text"
    example:
      text: "text"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataTimePoint:
    type: "array"
    items:
      $ref: "#/definitions/Float"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataTimeSeries:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      points:
        $ref: "#/definitions/DataTimeSeriesPoints"
      tags:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Tags"
    description: "DataTimeSeries -- this structure is deprecated, all new work should\
      \ use DataFrames from the SDK"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataTimeSeriesPoints:
    type: "array"
    items:
      $ref: "#/definitions/DataTimePoint"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DataTimeSeriesSlice:
    type: "array"
    items:
      $ref: "#/definitions/DataTimeSeries"
    x-go-package: "github.com/grafana/grafana/pkg/tsdb/legacydata"
  DeleteAnnotationsCmd:
    type: "object"
    properties:
      alertId:
        type: "integer"
        format: "int64"
        x-go-name: "AlertId"
      annotationId:
        type: "integer"
        format: "int64"
        x-go-name: "AnnotationId"
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
    example:
      panelId: 5
      dashboardId: 1
      alertId: 0
      annotationId: 6
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  DsAccess:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  Duration:
    type: "integer"
    format: "int64"
    description: "A Duration represents the elapsed time between two instants\nas\
      \ an int64 nanosecond count. The representation limits the\nlargest representable\
      \ duration to approximately 290 years."
    x-go-package: "time"
  ErrorResponseBody:
    type: "object"
    required:
    - "message"
    properties:
      error:
        type: "string"
        description: "Error An optional detailed description of the actual error.\
          \ Only included if running in developer mode."
        x-go-name: "Error"
      message:
        type: "string"
        description: "a human readable version of the error"
        x-go-name: "Message"
      status:
        type: "string"
        description: "Status An optional status to denote the cause of the error.\n\
          \nFor example, a 412 Precondition Failed error may include additional information\
          \ of why that error happened."
        x-go-name: "Status"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  EvalMatch:
    type: "object"
    properties:
      metric:
        type: "string"
        x-go-name: "Metric"
      tags:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "Tags"
      value:
        $ref: "#/definitions/Float"
    example:
      metric: "metric"
      value:
        Float64: 0.8008281904610115
        Valid: true
      tags:
        key: "tags"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  FindTagsResult:
    type: "object"
    properties:
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagsDTO"
        x-go-name: "Tags"
    title: "FindTagsResult is the result of a tags search."
    example:
      tags:
      - count: 0
        tag: "tag"
      - count: 0
        tag: "tag"
    x-go-package: "github.com/grafana/grafana/pkg/services/annotations"
  Float:
    type: "object"
    properties:
      Float64:
        type: "number"
        format: "double"
      Valid:
        type: "boolean"
    title: "Float is a nullable float64."
    description: "It does not consider zero values to be null.\nIt will decode to\
      \ null, not zero, if null."
    example:
      Float64: 0.8008281904610115
      Valid: true
    x-go-package: "github.com/grafana/grafana/pkg/components/null"
  Folder:
    type: "object"
    properties:
      canAdmin:
        type: "boolean"
        x-go-name: "CanAdmin"
      canEdit:
        type: "boolean"
        x-go-name: "CanEdit"
      canSave:
        type: "boolean"
        x-go-name: "CanSave"
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        type: "string"
        x-go-name: "CreatedBy"
      hasAcl:
        type: "boolean"
        x-go-name: "HasAcl"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "Uid"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      updatedBy:
        type: "string"
        x-go-name: "UpdatedBy"
      url:
        type: "string"
        x-go-name: "Url"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    example:
      updatedBy: "updatedBy"
      created: "2000-01-23T04:56:07.000+00:00"
      canEdit: true
      canSave: true
      title: "title"
      version: 6
      url: "url"
      uid: "uid"
      hasAcl: true
      createdBy: "createdBy"
      canAdmin: true
      id: 0
      updated: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  FolderSearchHit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "Uid"
    example:
      uid: "uid"
      id: 0
      title: "title"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  GetAnnotationTagsResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/FindTagsResult"
    title: "GetAnnotationTagsResponse is a response struct for FindTagsResult."
    example:
      result:
        tags:
        - count: 0
          tag: "tag"
        - count: 0
          tag: "tag"
    x-go-package: "github.com/grafana/grafana/pkg/services/annotations"
  GetHomeDashboardResponse:
    title: "Get home dashboard response."
    allOf:
    - type: "object"
      properties:
        dashboard:
          $ref: "#/definitions/Json"
        meta:
          $ref: "#/definitions/DashboardMeta"
    - type: "object"
      properties:
        redirectUri:
          type: "string"
          x-go-name: "RedirectUri"
    x-go-name: "GetHomeDashboardResponseBody"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  Hit:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderID"
      folderTitle:
        type: "string"
        x-go-name: "FolderTitle"
      folderUid:
        type: "string"
        x-go-name: "FolderUID"
      folderUrl:
        type: "string"
        x-go-name: "FolderURL"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      isStarred:
        type: "boolean"
        x-go-name: "IsStarred"
      slug:
        type: "string"
        x-go-name: "Slug"
      sortMeta:
        type: "integer"
        format: "int64"
        x-go-name: "SortMeta"
      sortMetaName:
        type: "string"
        x-go-name: "SortMetaName"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      title:
        type: "string"
        x-go-name: "Title"
      type:
        $ref: "#/definitions/HitType"
      uid:
        type: "string"
        x-go-name: "UID"
      uri:
        type: "string"
        x-go-name: "URI"
      url:
        type: "string"
        x-go-name: "URL"
    x-go-package: "github.com/grafana/grafana/pkg/services/search"
  HitList:
    type: "array"
    items:
      $ref: "#/definitions/Hit"
    x-go-package: "github.com/grafana/grafana/pkg/services/search"
  HitType:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/services/search"
  ImportDashboardCommand:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderId"
      folderUid:
        type: "string"
        x-go-name: "FolderUid"
      inputs:
        type: "array"
        items:
          $ref: "#/definitions/ImportDashboardInput"
        x-go-name: "Inputs"
      overwrite:
        type: "boolean"
        x-go-name: "Overwrite"
      path:
        type: "string"
        x-go-name: "Path"
      pluginId:
        type: "string"
        x-go-name: "PluginId"
    example:
      path: "path"
      folderUid: "folderUid"
      inputs:
      - pluginId: "pluginId"
        name: "name"
        type: "type"
        value: "value"
      - pluginId: "pluginId"
        name: "name"
        type: "type"
        value: "value"
      pluginId: "pluginId"
      overwrite: true
      dashboard: {}
      folderId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  ImportDashboardInput:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      pluginId:
        type: "string"
        x-go-name: "PluginId"
      type:
        type: "string"
        x-go-name: "Type"
      value:
        type: "string"
        x-go-name: "Value"
    example:
      pluginId: "pluginId"
      name: "name"
      type: "type"
      value: "value"
    x-go-package: "github.com/grafana/grafana/pkg/plugins"
  ItemDTO:
    type: "object"
    properties:
      alertId:
        type: "integer"
        format: "int64"
        x-go-name: "AlertId"
      alertName:
        type: "string"
        x-go-name: "AlertName"
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      created:
        type: "integer"
        format: "int64"
        x-go-name: "Created"
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      data:
        $ref: "#/definitions/Json"
      email:
        type: "string"
        x-go-name: "Email"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      login:
        type: "string"
        x-go-name: "Login"
      newState:
        type: "string"
        x-go-name: "NewState"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
      prevState:
        type: "string"
        x-go-name: "PrevState"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      text:
        type: "string"
        x-go-name: "Text"
      time:
        type: "integer"
        format: "int64"
        x-go-name: "Time"
      timeEnd:
        type: "integer"
        format: "int64"
        x-go-name: "TimeEnd"
      updated:
        type: "integer"
        format: "int64"
        x-go-name: "Updated"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    example:
      timeEnd: 7
      panelId: 5
      data: {}
      avatarUrl: "avatarUrl"
      created: 6
      login: "login"
      userId: 3
      tags:
      - "tags"
      - "tags"
      prevState: "prevState"
      alertName: "alertName"
      dashboardId: 1
      alertId: 0
      id: 5
      text: "text"
      time: 2
      updated: 9
      email: "email"
      newState: "newState"
    x-go-package: "github.com/grafana/grafana/pkg/services/annotations"
  Json:
    type: "object"
    x-go-package: "github.com/grafana/grafana/pkg/components/simplejson"
  LibraryElementConnectionDTO:
    type: "object"
    properties:
      connectionId:
        type: "integer"
        format: "int64"
        x-go-name: "ConnectionID"
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
      elementId:
        type: "integer"
        format: "int64"
        x-go-name: "ElementID"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      kind:
        type: "integer"
        format: "int64"
        x-go-name: "Kind"
    title: "LibraryElementConnectionDTO is the frontend DTO for element connections."
    example:
      elementId: 6
      createdBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      created: "2000-01-23T04:56:07.000+00:00"
      kind: 5
      connectionId: 0
      id: 1
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementConnectionsResponse:
    type: "object"
    properties:
      result:
        type: "array"
        items:
          $ref: "#/definitions/LibraryElementConnectionDTO"
        x-go-name: "Result"
    title: "LibraryElementConnectionsResponse is a response struct for an array of\
      \ LibraryElementConnectionDTO."
    example:
      result:
      - elementId: 6
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        kind: 5
        connectionId: 0
        id: 1
      - elementId: 6
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        kind: 5
        connectionId: 0
        id: 1
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementDTO:
    type: "object"
    properties:
      description:
        type: "string"
        x-go-name: "Description"
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderID"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      kind:
        type: "integer"
        format: "int64"
        x-go-name: "Kind"
      meta:
        $ref: "#/definitions/LibraryElementDTOMeta"
      model:
        type: "object"
        properties: {}
        x-go-name: "Model"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgID"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "UID"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    title: "LibraryElementDTO is the frontend DTO for entities."
    example:
      uid: "uid"
      kind: 1
      meta:
        folderUid: "folderUid"
        updatedBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        createdBy:
          avatarUrl: "avatarUrl"
          name: "name"
          id: 5
        created: "2000-01-23T04:56:07.000+00:00"
        folderName: "folderName"
        connectedDashboards: 5
        updated: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      model: "{}"
      id: 6
      type: "type"
      version: 7
      folderId: 0
      orgId: 2
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementDTOMeta:
    type: "object"
    properties:
      connectedDashboards:
        type: "integer"
        format: "int64"
        x-go-name: "ConnectedDashboards"
      created:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      createdBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
      folderName:
        type: "string"
        x-go-name: "FolderName"
      folderUid:
        type: "string"
        x-go-name: "FolderUID"
      updated:
        type: "string"
        format: "date-time"
        x-go-name: "Updated"
      updatedBy:
        $ref: "#/definitions/LibraryElementDTOMetaUser"
    title: "LibraryElementDTOMeta is the meta information for LibraryElementDTO."
    example:
      folderUid: "folderUid"
      updatedBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      createdBy:
        avatarUrl: "avatarUrl"
        name: "name"
        id: 5
      created: "2000-01-23T04:56:07.000+00:00"
      folderName: "folderName"
      connectedDashboards: 5
      updated: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementDTOMetaUser:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
        x-go-name: "AvatarURL"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      name:
        type: "string"
        x-go-name: "Name"
    title: "LibraryElementDTOMetaUser is the meta information for user that creates/changes\
      \ the library element."
    example:
      avatarUrl: "avatarUrl"
      name: "name"
      id: 5
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/LibraryElementDTO"
    title: "LibraryElementResponse is a response struct for LibraryElementDTO."
    example:
      result:
        uid: "uid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementSearchResponse:
    type: "object"
    properties:
      result:
        $ref: "#/definitions/LibraryElementSearchResult"
    title: "LibraryElementSearchResponse is a response struct for LibraryElementSearchResult."
    example:
      result:
        perPage: 3
        elements:
        - uid: "uid"
          kind: 1
          meta:
            folderUid: "folderUid"
            updatedBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            createdBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            created: "2000-01-23T04:56:07.000+00:00"
            folderName: "folderName"
            connectedDashboards: 5
            updated: "2000-01-23T04:56:07.000+00:00"
          name: "name"
          description: "description"
          model: "{}"
          id: 6
          type: "type"
          version: 7
          folderId: 0
          orgId: 2
        - uid: "uid"
          kind: 1
          meta:
            folderUid: "folderUid"
            updatedBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            createdBy:
              avatarUrl: "avatarUrl"
              name: "name"
              id: 5
            created: "2000-01-23T04:56:07.000+00:00"
            folderName: "folderName"
            connectedDashboards: 5
            updated: "2000-01-23T04:56:07.000+00:00"
          name: "name"
          description: "description"
          model: "{}"
          id: 6
          type: "type"
          version: 7
          folderId: 0
          orgId: 2
        page: 9
        totalCount: 2
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  LibraryElementSearchResult:
    type: "object"
    properties:
      elements:
        type: "array"
        items:
          $ref: "#/definitions/LibraryElementDTO"
        x-go-name: "Elements"
      page:
        type: "integer"
        format: "int64"
        x-go-name: "Page"
      perPage:
        type: "integer"
        format: "int64"
        x-go-name: "PerPage"
      totalCount:
        type: "integer"
        format: "int64"
        x-go-name: "TotalCount"
    title: "LibraryElementSearchResult is the search result for entities."
    example:
      perPage: 3
      elements:
      - uid: "uid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
      - uid: "uid"
        kind: 1
        meta:
          folderUid: "folderUid"
          updatedBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          createdBy:
            avatarUrl: "avatarUrl"
            name: "name"
            id: 5
          created: "2000-01-23T04:56:07.000+00:00"
          folderName: "folderName"
          connectedDashboards: 5
          updated: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        description: "description"
        model: "{}"
        id: 6
        type: "type"
        version: 7
        folderId: 0
        orgId: 2
      page: 9
      totalCount: 2
    x-go-package: "github.com/grafana/grafana/pkg/services/libraryelements"
  MetricRequest:
    type: "object"
    required:
    - "from"
    - "queries"
    - "to"
    properties:
      debug:
        type: "boolean"
        x-go-name: "Debug"
      from:
        type: "string"
        example: "now-1h"
        description: "From Start time in epoch timestamps in milliseconds or relative\
          \ using Grafana time units."
        x-go-name: "From"
      queries:
        type: "array"
        example:
        - datasourceId: 86
          format: "table"
          intervalMs: 86400000
          maxDataPoints: 1092
          rawSql: "SELECT 1 as valueOne, 2 as valueTwo"
          refId: "A"
        description: "queries.refId – Specifies an identifier of the query. Is optional\
          \ and default to “A”.\nqueries.datasourceId – Specifies the data source\
          \ to be queried. Each query in the request must have an unique datasourceId.\n\
          queries.maxDataPoints - Species maximum amount of data points that dashboard\
          \ panel can render. Is optional and default to 100.\nqueries.intervalMs\
          \ - Specifies the time interval in milliseconds of time series. Is optional\
          \ and defaults to 1000."
        items:
          $ref: "#/definitions/Json"
        x-go-name: "Queries"
      to:
        type: "string"
        example: "now"
        description: "To End time in epoch timestamps in milliseconds or relative\
          \ using Grafana time units."
        x-go-name: "To"
    description: "MetricRequest same as dtos.MetricRequest but with swagger annotations"
    example:
      debug: true
      from: "now-1h"
      to: "now"
      queries:
      - datasourceId: 86
        format: "table"
        intervalMs: 86400000
        maxDataPoints: 1092
        rawSql: "SELECT 1 as valueOne, 2 as valueTwo"
        refId: "A"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  NewApiKeyResult:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      key:
        type: "string"
        x-go-name: "Key"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
      id: 0
      key: "key"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  NotificationTestCommand:
    type: "object"
    properties:
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      frequency:
        type: "string"
        x-go-name: "Frequency"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "ID"
      name:
        type: "string"
        x-go-name: "Name"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureSettings"
      sendReminder:
        type: "boolean"
        x-go-name: "SendReminder"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
    example:
      settings: {}
      disableResolveMessage: true
      secureSettings:
        key: "secureSettings"
      name: "name"
      sendReminder: true
      id: 0
      type: "type"
      frequency: "frequency"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  OrgDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
      id: 0
    x-go-package: "github.com/grafana/grafana/pkg/models"
  OrgDetailsDTO:
    type: "object"
    properties:
      address:
        $ref: "#/definitions/Address"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      address:
        country: "country"
        zipCode: "zipCode"
        address2: "address2"
        city: "city"
        address1: "address1"
        state: "state"
      name: "name"
      id: 0
    x-go-package: "github.com/grafana/grafana/pkg/models"
  OrgUserDTO:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      email:
        type: "string"
        x-go-name: "Email"
      lastSeenAt:
        type: "string"
        format: "date-time"
        x-go-name: "LastSeenAt"
      lastSeenAtAge:
        type: "string"
        x-go-name: "LastSeenAtAge"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      role:
        type: "string"
        x-go-name: "Role"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    example:
      lastSeenAt: "2000-01-23T04:56:07.000+00:00"
      role: "role"
      avatarUrl: "avatarUrl"
      name: "name"
      login: "login"
      userId: 6
      email: "email"
      orgId: 0
      lastSeenAtAge: "lastSeenAtAge"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  PatchAnnotationsCmd:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      text:
        type: "string"
        x-go-name: "Text"
      time:
        type: "integer"
        format: "int64"
        x-go-name: "Time"
      timeEnd:
        type: "integer"
        format: "int64"
        x-go-name: "TimeEnd"
    example:
      timeEnd: 1
      id: 0
      text: "text"
      time: 6
      tags:
      - "tags"
      - "tags"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  PatchLibraryElementCommand:
    type: "object"
    properties:
      folderId:
        type: "integer"
        format: "int64"
        description: "ID of the folder where the library element is stored."
        x-go-name: "FolderID"
      kind:
        type: "integer"
        format: "int64"
        description: "Kind of element to create, Use 1 for library panels or 2 for\
          \ c.\nDescription:\n1 - library panels\n2 - library variables"
        enum:
        - 1
        - 2
        x-go-name: "Kind"
      model:
        type: "object"
        description: "The JSON model for the library element."
        properties: {}
        x-go-name: "Model"
      name:
        type: "string"
        description: "Name of the library element."
        x-go-name: "Name"
      uid:
        type: "string"
        x-go-name: "UID"
      version:
        type: "integer"
        format: "int64"
        description: "Version of the library element you are updating."
        x-go-name: "Version"
    description: "patchLibraryElementCommand is same as libraryelements.patchLibraryElementCommand\
      \ with swagger annotations"
    example:
      uid: "uid"
      kind: 6
      name: "name"
      model: "{}"
      version: 1
      folderId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  PauseAlertCommand:
    type: "object"
    properties:
      alertId:
        type: "integer"
        format: "int64"
        x-go-name: "AlertId"
      paused:
        type: "boolean"
        x-go-name: "Paused"
    example:
      paused: true
      alertId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  PauseAllAlertsCommand:
    type: "object"
    properties:
      paused:
        type: "boolean"
        x-go-name: "Paused"
    example:
      paused: true
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  PermissionType:
    type: "integer"
    format: "int64"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  PostAnnotationsCmd:
    type: "object"
    properties:
      dashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "DashboardId"
      data:
        $ref: "#/definitions/Json"
      panelId:
        type: "integer"
        format: "int64"
        x-go-name: "PanelId"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      text:
        type: "string"
        x-go-name: "Text"
      time:
        type: "integer"
        format: "int64"
        x-go-name: "Time"
      timeEnd:
        type: "integer"
        format: "int64"
        x-go-name: "TimeEnd"
    example:
      timeEnd: 5
      panelId: 6
      data: {}
      dashboardId: 0
      text: "text"
      time: 1
      tags:
      - "tags"
      - "tags"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  PostGraphiteAnnotationsCmd:
    type: "object"
    properties:
      data:
        type: "string"
        x-go-name: "Data"
      tags:
        type: "object"
        properties: {}
        x-go-name: "Tags"
      what:
        type: "string"
        x-go-name: "What"
      when:
        type: "integer"
        format: "int64"
        x-go-name: "When"
    example:
      what: "what"
      data: "data"
      when: 0
      tags: "{}"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  Prefs:
    type: "object"
    properties:
      homeDashboardId:
        type: "integer"
        format: "int64"
        x-go-name: "HomeDashboardID"
      theme:
        type: "string"
        x-go-name: "Theme"
      timezone:
        type: "string"
        x-go-name: "Timezone"
      weekStart:
        type: "string"
        x-go-name: "WeekStart"
    example:
      homeDashboardId: 0
      weekStart: "weekStart"
      timezone: "timezone"
      theme: "theme"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  RevokeAuthTokenCmd:
    type: "object"
    properties:
      authTokenId:
        type: "integer"
        format: "int64"
        x-go-name: "AuthTokenId"
    example:
      authTokenId: 0
    x-go-package: "github.com/grafana/grafana/pkg/models"
  RoleType:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  SaveDashboardCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/Dashboard"
      UpdatedAt:
        type: "string"
        format: "date-time"
      dashboard:
        $ref: "#/definitions/Json"
      folderId:
        type: "integer"
        format: "int64"
        x-go-name: "FolderId"
      folderUid:
        type: "string"
        x-go-name: "FolderUid"
      isFolder:
        type: "boolean"
        x-go-name: "IsFolder"
      message:
        type: "string"
        x-go-name: "Message"
      overwrite:
        type: "boolean"
        x-go-name: "Overwrite"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    example:
      folderUid: "folderUid"
      isFolder: true
      message: "message"
      UpdatedAt: "2000-01-23T04:56:07.000+00:00"
      overwrite: true
      userId: 3
      folderId: 9
      Result:
        CreatedBy: 0
        Updated: "2000-01-23T04:56:07.000+00:00"
        Title: "Title"
        Data: {}
        FolderId: 6
        PluginId: "PluginId"
        Slug: "Slug"
        Created: "2000-01-23T04:56:07.000+00:00"
        OrgId: 5
        Uid: "Uid"
        UpdatedBy: 2
        GnetId: 1
        Version: 7
        HasAcl: true
        Id: 5
        IsFolder: true
    x-go-package: "github.com/grafana/grafana/pkg/models"
  SearchTeamQueryResult:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int64"
        x-go-name: "Page"
      perPage:
        type: "integer"
        format: "int64"
        x-go-name: "PerPage"
      teams:
        type: "array"
        items:
          $ref: "#/definitions/TeamDTO"
        x-go-name: "Teams"
      totalCount:
        type: "integer"
        format: "int64"
        x-go-name: "TotalCount"
    example:
      perPage: 6
      teams:
      - avatarUrl: "avatarUrl"
        memberCount: 5
        name: "name"
        permission: {}
        id: 1
        email: "email"
        orgId: 5
      - avatarUrl: "avatarUrl"
        memberCount: 5
        name: "name"
        permission: {}
        id: 1
        email: "email"
        orgId: 5
      page: 0
      totalCount: 2
    x-go-package: "github.com/grafana/grafana/pkg/models"
  SearchUserQueryResult:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int64"
        x-go-name: "Page"
      perPage:
        type: "integer"
        format: "int64"
        x-go-name: "PerPage"
      totalCount:
        type: "integer"
        format: "int64"
        x-go-name: "TotalCount"
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserSearchHitDTO"
        x-go-name: "Users"
    example:
      perPage: 6
      page: 0
      totalCount: 1
      users:
      - lastSeenAt: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        authLabels:
        - "authLabels"
        - "authLabels"
        name: "name"
        id: 5
        isAdmin: true
        isDisabled: true
        login: "login"
        email: "email"
        lastSeenAtAge: "lastSeenAtAge"
      - lastSeenAt: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        authLabels:
        - "authLabels"
        - "authLabels"
        name: "name"
        id: 5
        isAdmin: true
        isDisabled: true
        login: "login"
        email: "email"
        lastSeenAtAge: "lastSeenAtAge"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  SettingsBag:
    type: "object"
    additionalProperties:
      type: "object"
      additionalProperties:
        type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/setting"
  SuccessResponseBody:
    type: "object"
    properties:
      message:
        type: "string"
        x-go-name: "Message"
    example:
      message: "message"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  TagsDTO:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
        x-go-name: "Count"
      tag:
        type: "string"
        x-go-name: "Tag"
    title: "TagsDTO is the frontend DTO for Tag."
    example:
      count: 0
      tag: "tag"
    x-go-package: "github.com/grafana/grafana/pkg/services/annotations"
  TeamDTO:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      email:
        type: "string"
        x-go-name: "Email"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      memberCount:
        type: "integer"
        format: "int64"
        x-go-name: "MemberCount"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      permission:
        $ref: "#/definitions/PermissionType"
    example:
      avatarUrl: "avatarUrl"
      memberCount: 5
      name: "name"
      permission: {}
      id: 1
      email: "email"
      orgId: 5
    x-go-package: "github.com/grafana/grafana/pkg/models"
  TeamMemberDTO:
    type: "object"
    properties:
      auth_module:
        type: "string"
        x-go-name: "AuthModule"
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      email:
        type: "string"
        x-go-name: "Email"
      labels:
        type: "array"
        items:
          type: "string"
        x-go-name: "Labels"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      permission:
        $ref: "#/definitions/PermissionType"
      teamId:
        type: "integer"
        format: "int64"
        x-go-name: "TeamId"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  TempUserDTO:
    type: "object"
    properties:
      code:
        type: "string"
        x-go-name: "Code"
      createdOn:
        type: "string"
        format: "date-time"
        x-go-name: "Created"
      email:
        type: "string"
        x-go-name: "Email"
      emailSent:
        type: "boolean"
        x-go-name: "EmailSent"
      emailSentOn:
        type: "string"
        format: "date-time"
        x-go-name: "EmailSentOn"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      invitedByEmail:
        type: "string"
        x-go-name: "InvitedByEmail"
      invitedByLogin:
        type: "string"
        x-go-name: "InvitedByLogin"
      invitedByName:
        type: "string"
        x-go-name: "InvitedByName"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      role:
        $ref: "#/definitions/RoleType"
      status:
        $ref: "#/definitions/TempUserStatus"
      url:
        type: "string"
        x-go-name: "Url"
    example:
      code: "code"
      role: {}
      createdOn: "2000-01-23T04:56:07.000+00:00"
      orgId: 6
      url: "url"
      invitedByEmail: "invitedByEmail"
      invitedByName: "invitedByName"
      emailSent: true
      name: "name"
      id: 0
      emailSentOn: "2000-01-23T04:56:07.000+00:00"
      email: "email"
      invitedByLogin: "invitedByLogin"
      status: {}
    x-go-package: "github.com/grafana/grafana/pkg/models"
  TempUserStatus:
    type: "string"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  TrimDashboardCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/Dashboard"
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/Json"
    example:
      dashboard: {}
      Result:
        CreatedBy: 0
        Updated: "2000-01-23T04:56:07.000+00:00"
        Title: "Title"
        Data: {}
        FolderId: 6
        PluginId: "PluginId"
        Slug: "Slug"
        Created: "2000-01-23T04:56:07.000+00:00"
        OrgId: 5
        Uid: "Uid"
        UpdatedBy: 2
        GnetId: 1
        Version: 7
        HasAcl: true
        Id: 5
        IsFolder: true
    x-go-package: "github.com/grafana/grafana/pkg/models"
  TrimDashboardFullWithMeta:
    type: "object"
    properties:
      dashboard:
        $ref: "#/definitions/Json"
      meta:
        $ref: "#/definitions/Json"
    example:
      dashboard: {}
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  UpdateAlertNotificationCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/AlertNotification"
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      frequency:
        type: "string"
        x-go-name: "Frequency"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      name:
        type: "string"
        x-go-name: "Name"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureSettings"
      sendReminder:
        type: "boolean"
        x-go-name: "SendReminder"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
    example:
      settings: {}
      uid: "uid"
      isDefault: true
      disableResolveMessage: true
      secureSettings:
        key: "secureSettings"
      name: "name"
      sendReminder: true
      id: 0
      type: "type"
      Result:
        settings: {}
        uid: "uid"
        isDefault: true
        disableResolveMessage: true
        created: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        sendReminder: true
        id: 0
        secureFields:
          key: true
        type: "type"
        updated: "2000-01-23T04:56:07.000+00:00"
        frequency: "frequency"
      frequency: "frequency"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateAlertNotificationWithUidCommand:
    type: "object"
    properties:
      OrgId:
        type: "integer"
        format: "int64"
      Result:
        $ref: "#/definitions/AlertNotification"
      disableResolveMessage:
        type: "boolean"
        x-go-name: "DisableResolveMessage"
      frequency:
        type: "string"
        x-go-name: "Frequency"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      name:
        type: "string"
        x-go-name: "Name"
      secureSettings:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureSettings"
      sendReminder:
        type: "boolean"
        x-go-name: "SendReminder"
      settings:
        $ref: "#/definitions/Json"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "NewUid"
    example:
      OrgId: 0
      settings: {}
      uid: "uid"
      isDefault: true
      disableResolveMessage: true
      secureSettings:
        key: "secureSettings"
      name: "name"
      sendReminder: true
      type: "type"
      Result:
        settings: {}
        uid: "uid"
        isDefault: true
        disableResolveMessage: true
        created: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        sendReminder: true
        id: 0
        secureFields:
          key: true
        type: "type"
        updated: "2000-01-23T04:56:07.000+00:00"
        frequency: "frequency"
      frequency: "frequency"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateAnnotationsCmd:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      tags:
        type: "array"
        items:
          type: "string"
        x-go-name: "Tags"
      text:
        type: "string"
        x-go-name: "Text"
      time:
        type: "integer"
        format: "int64"
        x-go-name: "Time"
      timeEnd:
        type: "integer"
        format: "int64"
        x-go-name: "TimeEnd"
    example:
      timeEnd: 1
      id: 0
      text: "text"
      time: 6
      tags:
      - "tags"
      - "tags"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  UpdateDashboardAclCommand:
    type: "object"
    properties:
      items:
        type: "array"
        description: "The permission items to add/update. Items that are omitted from\
          \ the list will be removed."
        items:
          $ref: "#/definitions/DashboardAclUpdateItem"
        x-go-name: "Items"
    description: "UpdateDashboardAclCommand is same as dtos.UpdateDashboardAclCommand\
      \ but with swagger annotations"
    example:
      items:
      - role: {}
        teamId: 6
        permission: 0
        userId: 1
      - role: {}
        teamId: 6
        permission: 0
        userId: 1
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  UpdateDataSourceCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/DataSource"
      access:
        $ref: "#/definitions/DsAccess"
      basicAuth:
        type: "boolean"
        x-go-name: "BasicAuth"
      basicAuthPassword:
        type: "string"
        x-go-name: "BasicAuthPassword"
      basicAuthUser:
        type: "string"
        x-go-name: "BasicAuthUser"
      database:
        type: "string"
        x-go-name: "Database"
      isDefault:
        type: "boolean"
        x-go-name: "IsDefault"
      jsonData:
        $ref: "#/definitions/Json"
      name:
        type: "string"
        x-go-name: "Name"
      password:
        type: "string"
        x-go-name: "Password"
      secureJsonData:
        type: "object"
        additionalProperties:
          type: "string"
        x-go-name: "SecureJsonData"
      type:
        type: "string"
        x-go-name: "Type"
      uid:
        type: "string"
        x-go-name: "Uid"
      url:
        type: "string"
        x-go-name: "Url"
      user:
        type: "string"
        x-go-name: "User"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
      withCredentials:
        type: "boolean"
        x-go-name: "WithCredentials"
    description: "Also acts as api DTO"
    example:
      access: {}
      basicAuthUser: "basicAuthUser"
      basicAuth: true
      basicAuthPassword: "basicAuthPassword"
      type: "type"
      version: 0
      url: "url"
      Result:
        access: {}
        basicAuthUser: "basicAuthUser"
        basicAuth: true
        basicAuthPassword: "basicAuthPassword"
        readOnly: true
        typeLogoUrl: "typeLogoUrl"
        type: "type"
        version: 1
        orgId: 6
        url: "url"
        uid: "uid"
        database: "database"
        isDefault: true
        password: "password"
        jsonData: {}
        withCredentials: true
        name: "name"
        id: 0
        user: "user"
        secureJsonFields:
          key: true
      uid: "uid"
      database: "database"
      isDefault: true
      password: "password"
      secureJsonData:
        key: "secureJsonData"
      jsonData: {}
      withCredentials: true
      name: "name"
      user: "user"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateFolderCommand:
    type: "object"
    properties:
      Result:
        $ref: "#/definitions/Folder"
      overwrite:
        type: "boolean"
        x-go-name: "Overwrite"
      title:
        type: "string"
        x-go-name: "Title"
      uid:
        type: "string"
        x-go-name: "Uid"
      version:
        type: "integer"
        format: "int64"
        x-go-name: "Version"
    example:
      uid: "uid"
      title: "title"
      overwrite: true
      version: 0
      Result:
        updatedBy: "updatedBy"
        created: "2000-01-23T04:56:07.000+00:00"
        canEdit: true
        canSave: true
        title: "title"
        version: 6
        url: "url"
        uid: "uid"
        hasAcl: true
        createdBy: "createdBy"
        canAdmin: true
        id: 0
        updated: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateOrgAddressForm:
    type: "object"
    properties:
      address1:
        type: "string"
        x-go-name: "Address1"
      address2:
        type: "string"
        x-go-name: "Address2"
      city:
        type: "string"
        x-go-name: "City"
      country:
        type: "string"
        x-go-name: "Country"
      state:
        type: "string"
        x-go-name: "State"
      zipcode:
        type: "string"
        x-go-name: "ZipCode"
    example:
      zipcode: "zipcode"
      country: "country"
      address2: "address2"
      city: "city"
      address1: "address1"
      state: "state"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  UpdateOrgForm:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
    example:
      name: "name"
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  UpdateOrgQuotaCmd:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
      target:
        type: "string"
        x-go-name: "Target"
    example:
      limit: 0
      target: "target"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateOrgUserCommand:
    type: "object"
    properties:
      role:
        $ref: "#/definitions/RoleType"
    example:
      role: {}
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdatePrefsCmd:
    type: "object"
    properties:
      homeDashboardId:
        type: "integer"
        format: "int64"
        description: "The numerical :id of a favorited dashboard"
        default: 0
        x-go-name: "HomeDashboardID"
      theme:
        type: "string"
        enum:
        - "light"
        - "dark"
        - ""
        x-go-name: "Theme"
      timezone:
        type: "string"
        enum:
        - "utc"
        - "browser"
        - ""
        x-go-name: "Timezone"
    description: "UpdatePrefsCmd is same as dtos.UpdatePrefsCmd but with swagger annotations"
    example:
      homeDashboardId: 0
      timezone: "utc"
      theme: "light"
    x-go-package: "github.com/grafana/grafana/pkg/api/docs/definitions"
  UpdateTeamCommand:
    type: "object"
    properties:
      Email:
        type: "string"
      Id:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
    example:
      Email: "Email"
      Id: 0
      Name: "Name"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateTeamMemberCommand:
    type: "object"
    properties:
      permission:
        $ref: "#/definitions/PermissionType"
    example:
      permission: {}
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateUserCommand:
    type: "object"
    properties:
      email:
        type: "string"
        x-go-name: "Email"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
      theme:
        type: "string"
        x-go-name: "Theme"
    example:
      name: "name"
      theme: "theme"
      login: "login"
      email: "email"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UpdateUserQuotaCmd:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
      target:
        type: "string"
        x-go-name: "Target"
    example:
      limit: 0
      target: "target"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserIdDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      message:
        type: "string"
        x-go-name: "Message"
    example:
      id: 0
      message: "message"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserLookupDTO:
    type: "object"
    properties:
      avatarUrl:
        type: "string"
        x-go-name: "AvatarURL"
      login:
        type: "string"
        x-go-name: "Login"
      userId:
        type: "integer"
        format: "int64"
        x-go-name: "UserID"
    example:
      avatarUrl: "avatarUrl"
      login: "login"
      userId: 0
    x-go-package: "github.com/grafana/grafana/pkg/api/dtos"
  UserOrgDTO:
    type: "object"
    properties:
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      role:
        $ref: "#/definitions/RoleType"
    example:
      role: {}
      name: "name"
      orgId: 0
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserProfileDTO:
    type: "object"
    properties:
      authLabels:
        type: "array"
        items:
          type: "string"
        x-go-name: "AuthLabels"
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      createdAt:
        type: "string"
        format: "date-time"
        x-go-name: "CreatedAt"
      email:
        type: "string"
        x-go-name: "Email"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isDisabled:
        type: "boolean"
        x-go-name: "IsDisabled"
      isExternal:
        type: "boolean"
        x-go-name: "IsExternal"
      isGrafanaAdmin:
        type: "boolean"
        x-go-name: "IsGrafanaAdmin"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
      orgId:
        type: "integer"
        format: "int64"
        x-go-name: "OrgId"
      theme:
        type: "string"
        x-go-name: "Theme"
      updatedAt:
        type: "string"
        format: "date-time"
        x-go-name: "UpdatedAt"
    example:
      isExternal: true
      avatarUrl: "avatarUrl"
      isGrafanaAdmin: true
      authLabels:
      - "authLabels"
      - "authLabels"
      login: "login"
      orgId: 6
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      theme: "theme"
      id: 0
      isDisabled: true
      email: "email"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserQuotaDTO:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int64"
        x-go-name: "Limit"
      target:
        type: "string"
        x-go-name: "Target"
      used:
        type: "integer"
        format: "int64"
        x-go-name: "Used"
      user_id:
        type: "integer"
        format: "int64"
        x-go-name: "UserId"
    example:
      user_id: 1
      limit: 0
      used: 6
      target: "target"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserSearchHitDTO:
    type: "object"
    properties:
      authLabels:
        type: "array"
        items:
          type: "string"
        x-go-name: "AuthLabels"
      avatarUrl:
        type: "string"
        x-go-name: "AvatarUrl"
      email:
        type: "string"
        x-go-name: "Email"
      id:
        type: "integer"
        format: "int64"
        x-go-name: "Id"
      isAdmin:
        type: "boolean"
        x-go-name: "IsAdmin"
      isDisabled:
        type: "boolean"
        x-go-name: "IsDisabled"
      lastSeenAt:
        type: "string"
        format: "date-time"
        x-go-name: "LastSeenAt"
      lastSeenAtAge:
        type: "string"
        x-go-name: "LastSeenAtAge"
      login:
        type: "string"
        x-go-name: "Login"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      lastSeenAt: "2000-01-23T04:56:07.000+00:00"
      avatarUrl: "avatarUrl"
      authLabels:
      - "authLabels"
      - "authLabels"
      name: "name"
      id: 5
      isAdmin: true
      isDisabled: true
      login: "login"
      email: "email"
      lastSeenAtAge: "lastSeenAtAge"
    x-go-package: "github.com/grafana/grafana/pkg/models"
  UserToken:
    type: "object"
    properties:
      AuthToken:
        type: "string"
      AuthTokenSeen:
        type: "boolean"
      ClientIp:
        type: "string"
      CreatedAt:
        type: "integer"
        format: "int64"
      Id:
        type: "integer"
        format: "int64"
      PrevAuthToken:
        type: "string"
      RevokedAt:
        type: "integer"
        format: "int64"
      RotatedAt:
        type: "integer"
        format: "int64"
      SeenAt:
        type: "integer"
        format: "int64"
      UnhashedToken:
        type: "string"
      UpdatedAt:
        type: "integer"
        format: "int64"
      UserAgent:
        type: "string"
      UserId:
        type: "integer"
        format: "int64"
    description: "UserToken represents a user token"
    example:
      AuthTokenSeen: true
      RotatedAt: 5
      CreatedAt: 0
      UnhashedToken: "UnhashedToken"
      ClientIp: "ClientIp"
      UpdatedAt: 2
      RevokedAt: 1
      SeenAt: 5
      PrevAuthToken: "PrevAuthToken"
      UserId: 7
      UserAgent: "UserAgent"
      AuthToken: "AuthToken"
      Id: 6
    x-go-package: "github.com/grafana/grafana/pkg/models"
  inline_response_200:
    type: "object"
    required:
    - "alertsAffected"
    - "message"
    properties:
      alertsAffected:
        type: "integer"
        format: "int64"
        description: "AlertsAffected is the number of the affected alerts."
        x-go-name: "AlertsAffected"
      message:
        type: "string"
        x-go-name: "Message"
      state:
        type: "string"
        description: "Alert result state\nrequired true"
        x-go-name: "State"
    example:
      state: "state"
      alertsAffected: 0
      message: "message"
  inline_response_200_1:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted notification channel."
        x-go-name: "ID"
      message:
        type: "string"
        description: "Message Message of the deleted notificatiton channel."
        x-go-name: "Message"
    example:
      id: 65
      message: "message"
  inline_response_200_2:
    type: "object"
    required:
    - "alertId"
    - "message"
    properties:
      alertId:
        type: "integer"
        format: "int64"
        x-go-name: "AlertID"
      message:
        type: "string"
        x-go-name: "Message"
      state:
        type: "string"
        description: "Alert result state\nrequired true"
        x-go-name: "State"
    example:
      alertId: 0
      state: "state"
      message: "message"
  inline_response_200_3:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the created annotation."
        x-go-name: "ID"
      message:
        type: "string"
        description: "Message Message of the created annotation."
        x-go-name: "Message"
    example:
      id: 65
      message: "message"
  Body:
    type: "object"
    properties:
      base:
        $ref: "#/definitions/CalculateDiffTarget"
      diffType:
        type: "string"
        description: "The type of diff to return\nDescription:\n`basic`\n`json`"
        enum:
        - "basic"
        - "json"
        x-go-name: "DiffType"
      new:
        $ref: "#/definitions/CalculateDiffTarget"
    example:
      new:
        dashboardId: 0
        unsavedDashboard: {}
        version: 6
      diffType: "basic"
      base:
        dashboardId: 0
        unsavedDashboard: {}
        version: 6
  inline_response_200_4:
    type: "object"
    required:
    - "id"
    - "status"
    - "title"
    - "uid"
    - "url"
    - "version"
    properties:
      id:
        type: "string"
        example: "1"
        description: "ID The unique identifier (id) of the created/updated dashboard."
        x-go-name: "ID"
      status:
        type: "string"
        example: "success"
        description: "Status status of the response."
        x-go-name: "Status"
      title:
        type: "string"
        example: "my-dashboard"
        description: "Slug The slug of the dashboard."
        x-go-name: "Slug"
      uid:
        type: "string"
        example: "nHz3SXiiz"
        description: "UID The unique identifier (uid) of the created/updated dashboard."
        x-go-name: "UID"
      url:
        type: "string"
        example: "/d/nHz3SXiiz/my-dashboard"
        description: "URL The relative URL for accessing the created/updated dashboard."
        x-go-name: "URL"
      version:
        type: "integer"
        format: "int64"
        example: 2
        description: "Version The version of the dashboard."
        x-go-name: "Verion"
    example:
      uid: "nHz3SXiiz"
      id: "1"
      title: "my-dashboard"
      version: 2
      url: "/d/nHz3SXiiz/my-dashboard"
      status: "success"
  inline_response_200_5:
    type: "object"
    required:
    - "id"
    - "message"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted dashboard."
        x-go-name: "ID"
      message:
        type: "string"
        example: "Dashboard My Dashboard deleted"
        description: "Message Message of the deleted dashboard."
        x-go-name: "Message"
      title:
        type: "string"
        example: "My Dashboard"
        description: "Title Title of the deleted dashboard."
        x-go-name: "Title"
    example:
      id: 65
      message: "Dashboard My Dashboard deleted"
      title: "My Dashboard"
  inline_response_200_6:
    type: "object"
    required:
    - "datasource"
    - "id"
    - "message"
    - "name"
    properties:
      datasource:
        $ref: "#/definitions/DataSource"
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the new data source."
        x-go-name: "ID"
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the deleted dashboard."
        x-go-name: "Message"
      name:
        type: "string"
        example: "My Data source"
        description: "Name of the new data source."
        x-go-name: "Name"
    example:
      datasource:
        access: {}
        basicAuthUser: "basicAuthUser"
        basicAuth: true
        basicAuthPassword: "basicAuthPassword"
        readOnly: true
        typeLogoUrl: "typeLogoUrl"
        type: "type"
        version: 1
        orgId: 6
        url: "url"
        uid: "uid"
        database: "database"
        isDefault: true
        password: "password"
        jsonData: {}
        withCredentials: true
        name: "name"
        id: 0
        user: "user"
        secureJsonFields:
          key: true
      name: "My Data source"
      id: 65
      message: "Data source added"
  inline_response_200_7:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the data source."
        x-go-name: "ID"
    example:
      id: 65
  inline_response_200_8:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted data source."
        x-go-name: "ID"
      message:
        type: "string"
        example: "Dashboard My Dashboard deleted"
        description: "Message Message of the deleted dashboard."
        x-go-name: "Message"
    example:
      id: 65
      message: "Dashboard My Dashboard deleted"
  inline_response_200_9:
    type: "object"
    required:
    - "id"
    - "message"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the deleted folder."
        x-go-name: "ID"
      message:
        type: "string"
        example: "Folder My Folder deleted"
        description: "Message Message of the deleted folder."
        x-go-name: "Message"
      title:
        type: "string"
        example: "My Folder"
        description: "Title of the deleted folder."
        x-go-name: "Title"
    example:
      id: 65
      message: "Folder My Folder deleted"
      title: "My Folder"
  inline_response_200_10:
    type: "object"
    required:
    - "id"
    - "message"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the added user."
        x-go-name: "UsedID"
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the added user."
        x-go-name: "Message"
    example:
      id: 65
      message: "Data source added"
  inline_response_200_11:
    type: "object"
    required:
    - "message"
    - "orgId"
    properties:
      message:
        type: "string"
        example: "Data source added"
        description: "Message Message of the created org."
        x-go-name: "Message"
      orgId:
        type: "integer"
        format: "int64"
        example: 65
        description: "ID Identifier of the created org."
        x-go-name: "OrgID"
    example:
      message: "Data source added"
      orgId: 65
  inline_response_200_12:
    type: "object"
    properties:
      description:
        type: "string"
        x-go-name: "Description"
      displayName:
        type: "string"
        x-go-name: "DisplayName"
      meta:
        type: "string"
        x-go-name: "Meta"
      name:
        type: "string"
        x-go-name: "Name"
    example:
      displayName: "displayName"
      meta: "meta"
      name: "name"
      description: "description"
  inline_response_200_13:
    type: "object"
    properties:
      externalEnabled:
        type: "boolean"
        x-go-name: "ExternalEnabled"
      externalSnapshotName:
        type: "string"
        x-go-name: "ExternalSnapshotName"
      externalSnapshotURL:
        type: "string"
        x-go-name: "ExternalSnapshotURL"
    example:
      externalEnabled: true
      externalSnapshotURL: "externalSnapshotURL"
      externalSnapshotName: "externalSnapshotName"
  inline_response_200_14:
    type: "object"
    properties:
      deleteKey:
        type: "string"
        description: "Unique key used to delete the snapshot. It is different from\
          \ the key so that only the creator can delete the snapshot."
        x-go-name: "DeleteKey"
      deleteUrl:
        type: "string"
        x-go-name: "DeleteUrl"
      id:
        type: "integer"
        format: "int64"
        description: "Snapshot id"
        x-go-name: "ID"
      key:
        type: "string"
        description: "Unique key"
        x-go-name: "Key"
      url:
        type: "string"
        x-go-name: "URL"
    example:
      deleteKey: "deleteKey"
      deleteUrl: "deleteUrl"
      id: 0
      key: "key"
      url: "url"
  inline_response_200_15:
    type: "object"
    properties:
      message:
        type: "string"
        x-go-name: "Message"
      teamId:
        type: "integer"
        format: "int64"
        x-go-name: "TeamId"
    example:
      teamId: 0
      message: "message"
  inline_response_200_16:
    type: "object"
    properties:
      helpFlags1:
        type: "integer"
        format: "int64"
        x-go-name: "HelpFlags1"
      message:
        type: "string"
        x-go-name: "Message"
    example:
      helpFlags1: 0
      message: "message"
responses:
  SMTPNotEnabledError:
    description: ""
  addOrgUser:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_10"
  badRequestError:
    description: "BadRequestError is returned when the request is invalid and it cannot\
      \ be processed."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  conflictError:
    description: "ConflictError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  createAnnotationResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_3"
  createOrUpdateDatasourceResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_6"
  createOrgResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_11"
  createSnapshotResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_14"
  createTeamResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_15"
  createUserResponse:
    description: ""
    schema:
      $ref: "#/definitions/UserIdDTO"
  dashboardDiffResponse:
    description: "Calculate dashboard diff response."
    schema:
      type: "array"
      items:
        type: "integer"
        format: "uint8"
  dashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/DashboardFullWithMeta"
  dashboardVersionResponse:
    description: ""
    schema:
      $ref: "#/definitions/DashboardVersionMeta"
  dashboardVersionsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardVersionDTO"
  dashboardsTagsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardTagCloudItem"
  deleteAlertNotificationChannelResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_1"
  deleteDashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_5"
  deleteDatasourceByNameResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_8"
  deleteFolderResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_9"
  dublicateAPIkeyError:
    description: "DublicateAPIkeyError is returned when the API key conflicts with\
      \ another"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  folderResponse:
    description: ""
    schema:
      $ref: "#/definitions/Folder"
  forbiddenError:
    description: "ForbiddenError is returned if the user/token has insufficient permissions\
      \ to access the requested resource."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  genericError:
    description: "A GenericError is the default error message that is generated.\n\
      For certain status codes there are more appropriate error structures."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  getAPIkeyResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ApiKeyDTO"
  getAlertNotificationChannelResponse:
    description: ""
    schema:
      $ref: "#/definitions/AlertNotification"
  getAlertNotificationChannelsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertNotification"
  getAlertResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/Alert"
  getAlertsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertListItemDTO"
  getAnnotationTagsResponse:
    description: ""
    schema:
      $ref: "#/definitions/GetAnnotationTagsResponse"
  getAnnotationsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/ItemDTO"
  getAuthTokensResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserToken"
  getDashboardPermissionsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardAclInfoDTO"
  getDashboardStatesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertStateInfoDTO"
  getDatasourceIDresponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_7"
  getDatasourceResponse:
    description: ""
    schema:
      $ref: "#/definitions/DataSource"
  getDatasourcesResponse:
    description: ""
    schema:
      $ref: "#/definitions/DataSourceList"
  getFoldersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/FolderSearchHit"
  getHomeDashboardResponse:
    description: "Home dashboard response."
    schema:
      $ref: "#/definitions/GetHomeDashboardResponse"
  getInvitesResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TempUserDTO"
  getLibraryElementConnectionsResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementConnectionsResponse"
  getLibraryElementResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementResponse"
  getLibraryElementsResponse:
    description: ""
    schema:
      $ref: "#/definitions/LibraryElementSearchResponse"
  getOrgResponse:
    description: ""
    schema:
      $ref: "#/definitions/OrgDetailsDTO"
  getOrgUsersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/OrgUserDTO"
  getPreferencesResponse:
    description: ""
    schema:
      $ref: "#/definitions/Prefs"
  getQuotaResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserQuotaDTO"
  getSettingsResponse:
    description: ""
    schema:
      $ref: "#/definitions/SettingsBag"
  getSnapshotSharingOptionsResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_13"
  getSnapshotsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/DashboardSnapshotDTO"
  getStatsResponse:
    description: ""
    schema:
      $ref: "#/definitions/AdminStats"
  getTeamMembersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TeamMemberDTO"
  getTeamResponse:
    description: ""
    schema:
      $ref: "#/definitions/TeamDTO"
  getUserOrgListResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserOrgDTO"
  getUserTeamsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TeamDTO"
  helpFlagResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_16"
  importDashboardResponse:
    description: ""
    schema:
      $ref: "#/definitions/ImportDashboardInput"
  internalServerError:
    description: "InternalServerError is a general error indicating something went\
      \ wrong internally."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  lookupAlertNotificationChannelsResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/AlertNotificationLookup"
  lookupOrgUsersResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/UserLookupDTO"
  notFoundError:
    description: "NotFoundError is returned when the requested resource was not found."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  okResponse:
    description: "An OKResponse is returned if the request was successful."
    schema:
      $ref: "#/definitions/SuccessResponseBody"
  pauseAlertResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_2"
  pauseAlertsResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200"
  postAPIkeyResponse:
    description: ""
    schema:
      $ref: "#/definitions/NewApiKeyResult"
  postDashboardResponse:
    description: "Create/update dashboard response."
    schema:
      $ref: "#/definitions/inline_response_200_4"
  preconditionFailedError:
    description: "PreconditionFailedError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  queryDatasourceResponse:
    description: ""
    schema:
      $ref: "#/definitions/DataResponse"
  quotaReachedError:
    description: "QuotaReachedError is returned when quota have been reached for this\
      \ resource."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  searchOrgResponse:
    description: ""
    schema:
      type: "array"
      items:
        $ref: "#/definitions/OrgDTO"
  searchResponse:
    description: ""
    schema:
      $ref: "#/definitions/HitList"
  searchSortingResponse:
    description: ""
    schema:
      $ref: "#/definitions/inline_response_200_12"
  searchTeamsResponse:
    description: ""
    schema:
      $ref: "#/definitions/SearchTeamQueryResult"
  searchUsersResponse:
    description: ""
    schema:
      $ref: "#/definitions/SearchUserQueryResult"
  snapshotResponse:
    description: ""
  testAlertResponse:
    description: ""
    schema:
      $ref: "#/definitions/AlertTestResult"
  trimDashboardResponse:
    description: "Trimmed dashboard response."
    schema:
      $ref: "#/definitions/TrimDashboardFullWithMeta"
  unauthorisedError:
    description: "UnauthorizedError is returned when the request is not authenticated."
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  unprocessableEntityError:
    description: "UnprocessableEntityError"
    schema:
      $ref: "#/definitions/ErrorResponseBody"
  userResponse:
    description: ""
    schema:
      $ref: "#/definitions/UserProfileDTO"
